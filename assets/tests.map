{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/helpers/ember-power-select.js","dummy/tests/helpers/setup-router.js","dummy/tests/integration/components/denali-alert-inline-test.js","dummy/tests/integration/components/denali-alert-test.js","dummy/tests/integration/components/denali-alert/context-test.js","dummy/tests/integration/components/denali-alert/title-test.js","dummy/tests/integration/components/denali-box-test.js","dummy/tests/integration/components/denali-breadcrumb-test.js","dummy/tests/integration/components/denali-button-test.js","dummy/tests/integration/components/denali-checkbox-test.js","dummy/tests/integration/components/denali-chip-group-test.js","dummy/tests/integration/components/denali-chip-test.js","dummy/tests/integration/components/denali-icon-test.js","dummy/tests/integration/components/denali-input-group-test.js","dummy/tests/integration/components/denali-input-test.js","dummy/tests/integration/components/denali-link-test.js","dummy/tests/integration/components/denali-link-to-test.js","dummy/tests/integration/components/denali-loader-test.js","dummy/tests/integration/components/denali-menu-test.js","dummy/tests/integration/components/denali-menu/content-test.js","dummy/tests/integration/components/denali-menu/trigger-test.js","dummy/tests/integration/components/denali-modal-test.js","dummy/tests/integration/components/denali-navbar-test.js","dummy/tests/integration/components/denali-navbar/control-test.js","dummy/tests/integration/components/denali-navbar/icon-test.js","dummy/tests/integration/components/denali-navbar/item-test.js","dummy/tests/integration/components/denali-navbar/logo-test.js","dummy/tests/integration/components/denali-radio-test.js","dummy/tests/integration/components/denali-radio-toggle-test.js","dummy/tests/integration/components/denali-select-test.js","dummy/tests/integration/components/denali-sidebar-test.js","dummy/tests/integration/components/denali-switch-test.js","dummy/tests/integration/components/denali-tabs-test.js","dummy/tests/integration/components/denali-tabs/link-to-tab-test.js","dummy/tests/integration/components/denali-tabs/tab-test.js","dummy/tests/integration/components/denali-tag-test.js","dummy/tests/integration/components/denali-text-area-test.js","dummy/tests/integration/components/denali-title-test.js","dummy/tests/integration/components/denali-title/heading-test.js","dummy/tests/integration/components/denali-toggle-test.js","dummy/tests/test-helper.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"dummy/tests/helpers/ember-power-select\", [\"exports\", \"ember-power-select/test-support/helpers\"], function (_exports, _helpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = deprecatedRegisterHelpers;\n  _exports.selectChoose = _exports.touchTrigger = _exports.nativeTouch = _exports.clickTrigger = _exports.typeInSearch = _exports.triggerKeydown = _exports.nativeMouseUp = _exports.nativeMouseDown = _exports.findContains = void 0;\n\n  function deprecateHelper(fn, name) {\n    return function () {\n      (true && !(false) && Ember.deprecate(\"DEPRECATED `import { \".concat(name, \" } from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import { \").concat(name, \" } from 'ember-power-select/test-support/helpers';`\"), false, {\n        until: '1.11.0',\n        id: \"ember-power-select-test-support-\".concat(name)\n      }));\n      return fn.apply(void 0, arguments);\n    };\n  }\n\n  var findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  _exports.findContains = findContains;\n  var nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  _exports.nativeMouseDown = nativeMouseDown;\n  var nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  _exports.nativeMouseUp = nativeMouseUp;\n  var triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  _exports.triggerKeydown = triggerKeydown;\n  var typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  _exports.typeInSearch = typeInSearch;\n  var clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  _exports.clickTrigger = clickTrigger;\n  var nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  _exports.nativeTouch = nativeTouch;\n  var touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  _exports.touchTrigger = touchTrigger;\n  var selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n  _exports.selectChoose = selectChoose;\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, {\n      until: '1.11.0',\n      id: 'ember-power-select-test-support-register-helpers'\n    }));\n    return (0, _helpers.default)();\n  }\n});","define(\"dummy/tests/helpers/setup-router\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _default;\n\n  /* eslint-disable ember/no-private-routing-service */\n  function _default(hooks) {\n    hooks.beforeEach(function () {\n      var router = this.owner.lookup('router:main');\n      router.startRouting(true);\n    });\n  }\n});","define(\"dummy/tests/integration/components/denali-alert-inline-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-alert-inline', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders in block form', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlertInline>\n                      </DenaliAlertInline>\n                    \n                */\n                {\"id\":\"ebBUi2jo\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert-inline\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('div.alert.is-inline').exists('Inline alert renders in block form correctly');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it renders in non-block form', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlertInline/>\n                    \n                */\n                {\"id\":\"MmBh2yxO\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert-inline\\\",[],[[],[]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('div.alert.is-inline').exists('Inline alert renders in non-block form correctly');\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can yield a title sub component in block form', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlertInline as |Alert|>\n                        <Alert.Title>Test Title</Alert.Title>\n                      </DenaliAlertInline>\n                    \n                */\n                {\"id\":\"svHCoINo\",\"block\":\"{\\\"symbols\\\":[\\\"Alert\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert-inline\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Title\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Test Title\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.alert span.is-bold').hasText('Test Title', 'DenaliAlertInline yields a title sub component');\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can render a title in non-block form', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                        <DenaliAlertInline @title=\"Test Title\"/>\n                    \n                */\n                {\"id\":\"AYIINsbn\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,\\\"denali-alert-inline\\\",[],[[\\\"@title\\\"],[\\\"Test Title\\\"]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.alert span.is-bold').hasText('Test Title', 'DenaliAlertInline renders a title');\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can yield a context sub component in block form', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(2);\n                _context5.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlertInline as |Alert|>\n                        <Alert.Title>Test Title:</Alert.Title>\n                        <Alert.Context>Alert Context Details</Alert.Context>\n                      </DenaliAlertInline>\n                    \n                */\n                {\"id\":\"FfIRDTMI\",\"block\":\"{\\\"symbols\\\":[\\\"Alert\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert-inline\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Title\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Test Title:\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Context\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Alert Context Details\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.alert span.is-bold').hasText('Test Title:', 'Only the title is bold');\n                assert.dom('.alert p').hasText('Test Title: Alert Context Details', 'DenaliAlertInline renders both the title and context inside the p element');\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can render a context block in non-block form', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(2);\n                _context6.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlertInline @title=\"Test Title:\" @context=\"Alert Context Details\"/>\n                    \n                */\n                {\"id\":\"pOxe2pBa\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert-inline\\\",[],[[\\\"@title\\\",\\\"@context\\\"],[\\\"Test Title:\\\",\\\"Alert Context Details\\\"]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.alert span.is-bold').hasText('Test Title:', 'Only the title is bold');\n                assert.dom('.alert p').hasText('Test Title: Alert Context Details', 'DenaliAlertInline renders both the title and context inside the p element');\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can render different alert styles', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(5);\n                _context7.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlertInline @title=\"Alert Title:\" @context=\"Hello World!\" @style={{this.style}}/>\n                    \n                */\n                {\"id\":\"i46WCqv8\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert-inline\\\",[],[[\\\"@title\\\",\\\"@context\\\",\\\"@style\\\"],[\\\"Alert Title:\\\",\\\"Hello World!\\\",[32,0,[\\\"style\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.alert.is-inline').hasNoClass('No class is added when style is not set');\n                this.set('style', 'info');\n                assert.dom('.alert.is-inline').hasClass('has-bg-status-info', 'DenaliAlertInline has info styles when `@style` arg is set to info');\n                this.set('style', 'warning');\n                assert.dom('.alert.is-inline').hasClass('has-bg-status-warning', 'DenaliAlertInline has warning styles when `@style` arg is set to warning');\n                this.set('style', 'success');\n                assert.dom('.alert.is-inline').hasClass('has-bg-status-success', 'DenaliAlertInline has success styles when `@style` arg is set to success');\n                this.set('style', 'danger');\n                assert.dom('.alert.is-inline').hasClass('has-bg-status-danger', 'DenaliAlertInline has danger styles when `@style` arg is set to danger');\n\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-alert-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-alert', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders in block form', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlert>\n                      </DenaliAlert>\n                    \n                */\n                {\"id\":\"A4cBIYWz\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('div.alert').exists('DenaliAlert exists and renders a div with alert class');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it renders in non-block form', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlert/>\n                    \n                */\n                {\"id\":\"51em0d30\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert\\\",[],[[],[]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('div.alert').exists('DenaliAlert exists and renders a div with alert class');\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can yield a title sub component in block form', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlert as |Alert|>\n                        <Alert.Title>Alert Title!!1</Alert.Title>\n                      </DenaliAlert>\n                    \n                */\n                {\"id\":\"QpK9xE/R\",\"block\":\"{\\\"symbols\\\":[\\\"Alert\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Title\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Alert Title!!1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.alert h5').hasText('Alert Title!!1', 'DenaliAlert yields a title sub component');\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can render a title in non-block form', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                        <DenaliAlert @title=\"Alert Title!!1\"/>\n                    \n                */\n                {\"id\":\"YIt/aJSt\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,\\\"denali-alert\\\",[],[[\\\"@title\\\"],[\\\"Alert Title!!1\\\"]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.alert h5').hasText('Alert Title!!1', 'DenaliAlert renders a title');\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can yield a context sub component in block form', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlert as |Alert|>\n                        <Alert.Title>Alert Title!!1</Alert.Title>\n                        <Alert.Context>Alert Context Details</Alert.Context>\n                      </DenaliAlert>\n                    \n                */\n                {\"id\":\"ZlnjQx/6\",\"block\":\"{\\\"symbols\\\":[\\\"Alert\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Title\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Alert Title!!1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Context\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Alert Context Details\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.alert p').hasText('Alert Context Details', 'DenaliAlert renders a context block');\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can render a context block in non-block form', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlert @title=\"Alert Title!!1\" @context=\"Alert Context Details\"/>\n                    \n                */\n                {\"id\":\"0KdjSb9K\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert\\\",[],[[\\\"@title\\\",\\\"@context\\\"],[\\\"Alert Title!!1\\\",\\\"Alert Context Details\\\"]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.alert p').hasText('Alert Context Details', 'DenaliAlert renders a context block');\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports block styles', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                        <DenaliAlert @title=\"Alert Title!!1\" @isBlock={{this.isBlock}}/>\n                    \n                */\n                {\"id\":\"sLi71AWQ\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,\\\"denali-alert\\\",[],[[\\\"@title\\\",\\\"@isBlock\\\"],[\\\"Alert Title!!1\\\",[32,0,[\\\"isBlock\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.alert').doesNotHaveClass('is-block', 'DenaliAlert does not have block styles by default');\n                this.set('isBlock', true);\n                assert.dom('.alert').hasClass('is-block', 'DenaliAlert has block styles when `@isBlock` arg is set to true');\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can render different alert styles', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                        <DenaliAlert @title=\"Alert Title!!1\" @style={{this.style}}/>\n                    \n                */\n                {\"id\":\"V4WsyZSi\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,\\\"denali-alert\\\",[],[[\\\"@title\\\",\\\"@style\\\"],[\\\"Alert Title!!1\\\",[32,0,[\\\"style\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                this.set('style', 'info');\n                assert.dom('.alert').hasClass('is-info', 'DenaliAlert has info styles when `@style` arg is set to info');\n                this.set('style', 'warning');\n                assert.dom('.alert').hasClass('is-warning', 'DenaliAlert has warning styles when `@style` arg is set to warning');\n                this.set('style', 'success');\n                assert.dom('.alert').hasClass('is-success', 'DenaliAlert has success styles when `@style` arg is set to success');\n                this.set('style', 'danger');\n                assert.dom('.alert').hasClass('is-danger', 'DenaliAlert has danger styles when `@style` arg is set to danger');\n\n              case 10:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it icons when provided with `icon` arg', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlert\n                        @title=\"Alert Title!!1\"\n                        @icon={{this.icon}}\n                      />\n                    \n                */\n                {\"id\":\"L72FbL2q\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert\\\",[],[[\\\"@title\\\",\\\"@icon\\\"],[\\\"Alert Title!!1\\\",[32,0,[\\\"icon\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.alert .d-icon').doesNotHaveClass('d-check-circle', 'DenaliAlert does not render an icon by default');\n                this.set('icon', 'check-circle');\n                assert.dom('.alert .d-icon').hasClass('d-check-circle', 'DenaliAlert renders the specified `@icon` arg');\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it renders solid icons when `@isBlock` arg is true', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlert\n                        @title=\"Alert Title!!1\"\n                        @style={{this.style}}\n                        @isBlock={{true}}\n                        @icon=\"check-circle\"\n                      />\n                    \n                */\n                {\"id\":\"4INIq8w1\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert\\\",[],[[\\\"@title\\\",\\\"@style\\\",\\\"@isBlock\\\",\\\"@icon\\\"],[\\\"Alert Title!!1\\\",[32,0,[\\\"style\\\"]],true,\\\"check-circle\\\"]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.alert .d-icon').hasClass('d-check-circle-solid', 'DenaliAlert renders the solid notification icon by default when `@isBlock` is set to true');\n\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can render a close button', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(3);\n                _context11.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                        <DenaliAlert @title=\"Alert Title!!1\" @onClose={{this.onClose}}/>\n                    \n                */\n                {\"id\":\"SsC9dlwJ\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,\\\"denali-alert\\\",[],[[\\\"@title\\\",\\\"@onClose\\\"],[\\\"Alert Title!!1\\\",[32,0,[\\\"onClose\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.alert span.close').doesNotExist('DenaliAlert does not render a close button by default');\n                this.set('onClose', function (e) {\n                  assert.equal(e.type, 'click', 'DenaliAlert will call `@onClose` action when close button is clicked');\n                });\n                assert.dom('.alert span.close').exists('DenaliAlert renders a close button when `@onClose` arg is provided');\n                _context11.next = 8;\n                return (0, _testHelpers.click)('.close');\n\n              case 8:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-alert/context-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-alert/context', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlert::Context class=\"my-context\">\n                        Inner Content\n                      </DenaliAlert::Context>\n                    \n                */\n                {\"id\":\"KzsqVXb8\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert/context\\\",[[24,0,\\\"my-context\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('p.my-context').hasText('Inner Content', 'DenaliAlert::Context exists and renders inner content');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-alert/title-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-alert/title', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliAlert::Title class=\"my-title\">\n                        Inner Content\n                      </DenaliAlert::Title>\n                    \n                */\n                {\"id\":\"+jAWNrzo\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-alert/title\\\",[[24,0,\\\"my-title\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('h5.my-title').hasText('Inner Content', 'DenaliAlert::Title exists and renders inner content');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-box-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-box', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliBox>\n                        Inner Content\n                      </DenaliBox>\n                    \n                */\n                {\"id\":\"E+eSulK6\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-box\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('div.box').hasText('Inner Content', 'DenaliBox exists and renders inner content');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can yield a header component', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliBox as |Box|>\n                        <Box.Header>Header</Box.Header>\n                      </DenaliBox>\n                    \n                */\n                {\"id\":\"hu+v4p2S\",\"block\":\"{\\\"symbols\\\":[\\\"Box\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-box\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Header\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Header\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.box h3').hasText('Header', 'DenaliBox can yield a header component');\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can yield a sub header component', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliBox as |Box|>\n                        <Box.SubHeader>Sub Header</Box.SubHeader>\n                      </DenaliBox>\n                    \n                */\n                {\"id\":\"N//tUb4o\",\"block\":\"{\\\"symbols\\\":[\\\"Box\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-box\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"SubHeader\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Sub Header\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.box h5').hasText('Sub Header', 'DenaliBox can yield a sub header component');\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can yield a footer component', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliBox as |Box|>\n                        <Box.Footer>Footer</Box.Footer>\n                      </DenaliBox>\n                    \n                */\n                {\"id\":\"pVkAV/ty\",\"block\":\"{\\\"symbols\\\":[\\\"Box\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-box\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Footer\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Footer\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.box footer').hasText('Footer', 'DenaliBox can yield a footer component');\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-breadcrumb-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-breadcrumb', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(3);\n                this.set('items', [1, 2, 3, 4]);\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliBreadcrumb\n                        @items={{this.items}}\n                        as | item |\n                      >\n                        <span class=\"link\">{{item}}</span>\n                      </DenaliBreadcrumb>\n                    \n                */\n                {\"id\":\"3HL0u0eW\",\"block\":\"{\\\"symbols\\\":[\\\"item\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-breadcrumb\\\",[],[[\\\"@items\\\"],[[32,0,[\\\"items\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[10,\\\"span\\\"],[14,0,\\\"link\\\"],[12],[1,[32,1]],[13],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 4:\n                assert.dom('ul.breadcrumb').exists('A ul with class breadcrumb is rendered');\n                assert.dom('.breadcrumb li').exists({\n                  count: this.items.length\n                }, 'The number of li rendered equal the number of items passed through');\n                assert.dom('.breadcrumb .link').exists({\n                  count: this.items.length\n                }, 'Each item is wrapped in a span as specified');\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-button-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-button', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliButton>\n                        Inner Content\n                      </DenaliButton>\n                    \n                */\n                {\"id\":\"xd6Hx24Z\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('button.button').hasText('Inner Content', 'DenaliButton exists and renders inner content');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can be disabled', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliButton disabled={{this.isDisabled}}>\n                        Inner Content\n                      </DenaliButton>\n                    \n                */\n                {\"id\":\"OKIMv9gq\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[[16,\\\"disabled\\\",[32,0,[\\\"isDisabled\\\"]]]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.button').isNotDisabled('DenaliButton is not disabled by default');\n                this.set('isDisabled', true);\n                assert.dom('.button').isDisabled('DenaliButton can be disabled by setting the `disabled` attribute to true');\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports types', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliButton @type={{this.type}}>\n                        Inner Content\n                      </DenaliButton>\n                    \n                */\n                {\"id\":\"Ha06y1Ki\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@type\\\"],[[32,0,[\\\"type\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.button').hasAttribute('type', 'button', 'DenaliButton has a type of `button` by default');\n                this.set('type', 'submit');\n                assert.dom('.button').hasAttribute('type', 'submit', 'DenaliButton has a submit type when `type` arg is set to submit');\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it an be set active ', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliButton @isActive={{this.isActive}}>\n                        Inner Content\n                      </DenaliButton>\n                    \n                */\n                {\"id\":\"HB01QO30\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@isActive\\\"],[[32,0,[\\\"isActive\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.button').doesNotHaveClass('is-active', 'DenaliButton is not active by default');\n                this.set('isActive', true);\n                assert.dom('.button').hasClass('is-active', 'DenaliButton can be set active by setting the `@isActive` arg to true');\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports styles', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliButton @style={{this.style}}>\n                        Inner Content\n                      </DenaliButton>\n                    \n                */\n                {\"id\":\"lEHxQOpc\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@style\\\"],[[32,0,[\\\"style\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.button').hasClass('is-solid', 'DenaliButton has a solid style by default');\n                this.set('style', 'solid');\n                assert.dom('.button').hasClass('is-solid', 'DenaliButton has a solid style when `@style` arg is set to solid');\n                this.set('style', 'outline');\n                assert.dom('.button').hasClass('is-outline', 'DenaliButton has a outline style when `@style` arg is set to outline');\n                this.set('style', 'ghost');\n                assert.dom('.button').hasClass('is-ghost', 'DenaliButton has a ghost style when `@style` arg is set to ghost');\n                this.set('style', 'text');\n                assert.dom('.button').hasClass('is-text', 'DenaliButton has a text style when `@style` arg is set to text');\n                this.set('style', 'danger');\n                assert.dom('.button').hasClass('is-danger', 'DenaliButton has a danger style when `@style` arg is set to danger');\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports inverse colors', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliButton @isInverse={{this.isInverse}}>\n                        Inner Content\n                      </DenaliButton>\n                    \n                */\n                {\"id\":\"Xkz4WZoN\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@isInverse\\\"],[[32,0,[\\\"isInverse\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.button').doesNotHaveClass('is-inverse', 'DenaliButton does not have inverse styling by default');\n                this.set('isInverse', 'true');\n                assert.dom('.button').hasClass('is-inverse', 'DenaliButton has inverse styling when `@isInverse` arg is set to true');\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports sizes', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliButton @size={{this.size}}>\n                        Inner Content\n                      </DenaliButton>\n                    \n                */\n                {\"id\":\"4vSzUiTr\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@size\\\"],[[32,0,[\\\"size\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.button').exists('DenaliButton can render without a size set');\n                this.set('size', 'small');\n                assert.dom('.button').hasClass('is-small', 'DenaliButton has a small size when `@size` arg is set to small');\n                this.set('size', 'medium');\n                assert.dom('.button').hasClass('is-medium', 'DenaliButton has a medium size when `@size` arg is set to medium');\n                this.set('size', 'large');\n                assert.dom('.button').hasClass('is-large', 'DenaliButton has a large size when `@size` arg is set to large');\n\n              case 9:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports isFull', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliButton @size={{this.size}} @isFull={{this.isFull}}>\n                        Inner Content\n                      </DenaliButton>\n                    \n                */\n                {\"id\":\"U5fEVQcW\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@size\\\",\\\"@isFull\\\"],[[32,0,[\\\"size\\\"]],[32,0,[\\\"isFull\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.button').exists('DenaliButton can render without a size set');\n                assert.dom('.button').doesNotHaveClass('is-full', 'DenaliButton does not have a full size when `@isFull` arg is undefined');\n                this.set('isFull', true);\n                assert.dom('.button').hasClass('is-full', 'DenaliButton has a full size when `@isFull` arg is set to true');\n                this.set('size', 'small');\n                assert.dom('.button').hasClass('is-small', 'DenaliButton has a small size when `@size` arg is set to small');\n                assert.dom('.button').hasClass('is-full', 'DenaliButton has a full size when `@isFull` arg is set to true and size is set to small');\n                this.set('isFull', false);\n                assert.dom('.button').hasClass('is-small', 'DenaliButton has a small size when `@size` arg is set to small');\n                assert.dom('.button').doesNotHaveClass('is-full', 'DenaliButton does not have a full size when `@isFull` arg is set to false');\n\n              case 12:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports icons', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliButton @style=\"solid\" @icon={{this.icon}} @iconOnly={{this.iconOnly}}>\n                        Share\n                      </DenaliButton>\n                    \n                */\n                {\"id\":\"o6tQKES1\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@style\\\",\\\"@icon\\\",\\\"@iconOnly\\\"],[\\\"solid\\\",[32,0,[\\\"icon\\\"]],[32,0,[\\\"iconOnly\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Share\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.button .d-icon').doesNotExist('No icon is rendered when none is specified');\n                assert.dom('.button').doesNotHaveClass('has-icon', 'DenaliButton does not have a `has-icon` class by default');\n                this.set('icon', 'share');\n                assert.dom('.button .d-icon').exists('DenaliButton renders an icon when specified');\n                assert.dom('.button .d-icon').hasClass('d-share', 'DenaliButton renders the specified icon');\n                assert.dom('.button').doesNotHaveClass('has-icon', 'DenaliButton does not have a `has-icon` class');\n                this.set('iconOnly', true);\n                assert.dom('.button').hasClass('has-icon', 'DenaliButton has a `has-icon` class when iconOnly arg is set to true');\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports loading', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliButton \n                        @isLoading={{this.isLoading}} \n                        @icon=\"save\"\n                      >\n                        Save\n                      </DenaliButton>\n                    \n                */\n                {\"id\":\"Ad5YAKd3\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-button\\\",[],[[\\\"@isLoading\\\",\\\"@icon\\\"],[[32,0,[\\\"isLoading\\\"]],\\\"save\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Save\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.button').doesNotHaveClass('has-loader', 'DenaliButton does not have a `has-loader` class by default');\n                assert.dom('.button').hasText('Save', 'DenaliButton renders inner text by default');\n                assert.dom('.button .d-icon').exists('DenaliButton renders an icon when specified');\n                assert.dom('.button div.loader').doesNotExist('DenaliButton does render a loader by default');\n                this.set('isLoading', true);\n                assert.dom('.button').hasClass('has-loader', 'DenaliButton has `has-loader` class when `@isLoading` arg is true');\n                assert.dom('.button').hasNoText('DenaliButton does not render inner text when `@isLoading` arg is true');\n                assert.dom('.button .d-icon').doesNotExist('DenaliButton does not render an icon when `@isLoading` arg is true');\n                assert.dom('.button div.loader').exists('DenaliButton renders a loader when `@isLoading` arg is true');\n                assert.dom('.button div.loader--button').exists('DenaliButton renders a loader--button when `@isLoading` arg is true');\n\n              case 12:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-checkbox-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-checkbox', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(7);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliCheckbox\n                        checked={{this.checked}}\n                        disabled={{this.disabled}}\n                        data-partial={{this.partialData}}\n                      >\n                        Test\n                      </DenaliCheckbox>\n                    \n                */\n                {\"id\":\"iOjtCbvs\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-checkbox\\\",[[16,\\\"checked\\\",[32,0,[\\\"checked\\\"]]],[16,\\\"disabled\\\",[32,0,[\\\"disabled\\\"]]],[16,\\\"data-partial\\\",[32,0,[\\\"partialData\\\"]]]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Test\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.denali-checkbox').hasText('Test', 'A denali checkbox is rendered with the specified text');\n                assert.dom('.denali-checkbox input').isNotDisabled('The checkbox is not disabled by default');\n                assert.dom('.denali-checkbox input').isNotChecked('The checkbox is not checked by default');\n                assert.dom('.denali-checkbox input').doesNotHaveAttribute('data-partial', 'The checkbox does not have the data-partial attribute set by default');\n                this.set('partialData', true);\n                assert.dom('.denali-checkbox input').hasAttribute('data-partial', '', 'The checkbox has the data-partial attribute when set to true');\n                this.set('checked', true);\n                assert.dom('.denali-checkbox input').isChecked('The checkbox is checked when the checked attribute is set to true');\n                this.set('disabled', true);\n                assert.dom('.denali-checkbox input').isDisabled('The checkbox is disabled when the disabled attribute is set to true');\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('action', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(4);\n                this.set('clickHandler', function () {\n                  assert.ok('The click handler is called when checkbox is clicked');\n                });\n                _context2.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliCheckbox\n                        {{on 'click' (action this.clickHandler)}}\n                      >\n                        Test\n                      </DenaliCheckbox>\n                    \n                */\n                {\"id\":\"vYc5Nuh3\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-checkbox\\\",[[4,[38,1],[\\\"click\\\",[30,[36,0],[[32,0],[32,0,[\\\"clickHandler\\\"]]],null]],null]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Test\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"action\\\",\\\"on\\\"]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 4:\n                _context2.next = 6;\n                return (0, _testHelpers.click)('.denali-checkbox input');\n\n              case 6:\n                assert.dom('.denali-checkbox input').isChecked('The checkbox is checked when clicked on');\n                _context2.next = 9;\n                return (0, _testHelpers.click)('.denali-checkbox label');\n\n              case 9:\n                assert.dom('.denali-checkbox input').isNotChecked('The checkbox is unchecked when clicked again');\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-chip-group-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-chip-group', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliChipGroup as | Group |>\n                        <Group.Chip>Grouped</Group.Chip> <Group.Chip>Chips</Group.Chip>\n                      </DenaliChipGroup>\n                    \n                */\n                {\"id\":\"dB2a1IPC\",\"block\":\"{\\\"symbols\\\":[\\\"Group\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-chip-group\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Chip\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Grouped\\\"]],\\\"parameters\\\":[]}]]],[2,\\\" \\\"],[8,[32,1,[\\\"Chip\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Chips\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('span.chip-group span.chips').exists({\n                  count: 2\n                }, 'Chips are rendered inside group');\n                assert.dom('span.chip-group').hasText('Grouped Chips', 'Group has correct text');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-chip-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-chip', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliChip>\n                        Chip Text\n                      </DenaliChip>\n                    \n                */\n                {\"id\":\"a68zmJM/\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-chip\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Chip Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('span.chips').exists({\n                  count: 1\n                }, 'A chip is rendered');\n                assert.dom('span.chips').hasText('Chip Text', 'Chip has yielded text');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports sizes', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliChip @size={{this.size}}>\n                        Inner Content\n                      </DenaliChip>\n                    \n                */\n                {\"id\":\"s87uDUUV\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-chip\\\",[],[[\\\"@size\\\"],[[32,0,[\\\"size\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.chips').exists({\n                  count: 1\n                }, 'DenaliChip can render without a size set');\n                assert.dom('.chips').lacksClass(/is-[^\\s]*/, 'Ensure that when no size class is not rendered');\n                this.set('size', 'small');\n                assert.dom('.chips').hasClass('is-small', 'DenaliChip has a small size when `@size` arg is set to small');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports color', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliChip @textColor={{this.textColor}} @textShade={{this.textShade}} @backgroundColor={{this.backgroundColor}} @backgroundShade={{this.backgroundShade}}>\n                        Inner Content\n                      </DenaliChip>\n                    \n                */\n                {\"id\":\"23E8Vq3k\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-chip\\\",[],[[\\\"@textColor\\\",\\\"@textShade\\\",\\\"@backgroundColor\\\",\\\"@backgroundShade\\\"],[[32,0,[\\\"textColor\\\"]],[32,0,[\\\"textShade\\\"]],[32,0,[\\\"backgroundColor\\\"]],[32,0,[\\\"backgroundShade\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.chips').exists({\n                  count: 1\n                }, 'DenaliChip can render without set colors');\n                assert.dom('.chips').lacksClass(/is-[^\\s]*-[^\\s]*/, 'Ensure that when no textColor class is not rendered');\n                assert.dom('.chips').lacksClass(/has-bg-[^\\s]*-[^\\s]*/, 'Ensure that when no backgroundColor class is not rendered');\n                this.set('textShade', '300');\n                assert.dom('.chips').lacksClass(/is-[^\\s]*-300/, 'Ensure that when no textColor class is not rendered with shade');\n                this.set('backgroundShade', '300');\n                assert.dom('.chips').lacksClass(/has-bg-[^\\s]*-300/, 'Ensure that when no backgroundColor class is not rendered with shade');\n                this.set('textShade', undefined);\n                this.set('backgroundShade', undefined);\n                this.set('textColor', 'green');\n                assert.dom('.chips').hasClass('is-green-500', 'with text color class is attached and shade is default 500');\n                this.set('backgroundColor', 'orange');\n                assert.dom('.chips').hasClass('has-bg-orange-500', 'with bg color class is attached and shade is default 500');\n                this.set('textShade', '200');\n                assert.dom('.chips').hasClass('is-green-200', 'with text shade class is attached and shade is updated');\n                this.set('backgroundShade', '100');\n                assert.dom('.chips').hasClass('has-bg-orange-100', 'with bg shade class is attached and shade is updated');\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-icon-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-icon', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.set('icon', 'code');\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliIcon\n                        @icon={{this.icon}}\n                      />\n                    \n                */\n                {\"id\":\"qGqYz1B7\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-icon\\\",[],[[\\\"@icon\\\"],[[32,0,[\\\"icon\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('i.d-icon.d-code').exists('DenaliIcon exists and has the correct icon class');\n                this.set('icon', 'bug');\n                assert.dom('i.d-icon.d-bug').exists('DenaliIcon exists and has the correct icon class');\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports sizes', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliIcon\n                        @icon=\"code\"\n                        @size={{this.size}}\n                      >\n                        Link Text\n                      </DenaliIcon>\n                    \n                */\n                {\"id\":\"7/F8RvT+\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-icon\\\",[],[[\\\"@icon\\\",\\\"@size\\\"],[\\\"code\\\",[32,0,[\\\"size\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                this.set('size', 'extrasmall');\n                assert.dom('.d-icon').hasClass('is-extrasmall', 'DenaliIcon has a small size when `@size` arg is set to extrasmall');\n                this.set('size', 'small');\n                assert.dom('.d-icon').hasClass('is-small', 'DenaliIcon has a small size when `@size` arg is set to small');\n                this.set('size', 'medium');\n                assert.dom('.d-icon').hasClass('is-medium', 'DenaliIcon has a medium size when `@size` arg is set to medium');\n                this.set('size', 'large');\n                assert.dom('.d-icon').hasClass('is-large', 'DenaliIcon has a large size when `@size` arg is set to large');\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-input-group-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-input-group', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliInputGroup />\n                */\n                {\"id\":\"pJ5O4rtx\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input-group\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('div.input-group').exists('An input group is rendered');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it renders a label', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliInputGroup @label={{this.label}}/>\n                */\n                {\"id\":\"Aynt0klQ\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input-group\\\",[],[[\\\"@label\\\"],[[32,0,[\\\"label\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('label', 'My Label');\n                assert.dom('div.input-group label').hasTextContaining('My Label', 'An input group is rendered with a label');\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it yields', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliInputGroup @label=\"My Label\">\n                        <DenaliInput type=\"text\" placeholder=\"Text Field\" />\n                      </DenaliInputGroup>\n                    \n                */\n                {\"id\":\"OXB5M/9x\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-input-group\\\",[],[[\\\"@label\\\"],[\\\"My Label\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,\\\"denali-input\\\",[[24,\\\"placeholder\\\",\\\"Text Field\\\"],[24,4,\\\"text\\\"]],[[],[]],null],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('div.input-group div.input input').exists('`DenaliInputGroup` yields inner content');\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it renders stacked', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliInputGroup @label=\"My Label\" @isStacked={{true}}>\n                        <DenaliCheckbox>\n                          Test\n                        </DenaliCheckbox>\n                      </DenaliInputGroup>\n                    \n                */\n                {\"id\":\"GXccPMxd\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-input-group\\\",[],[[\\\"@label\\\",\\\"@isStacked\\\"],[\\\"My Label\\\",true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,\\\"denali-checkbox\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          Test\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('div.is-stacked').exists('An input group is rendered stacked');\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it renders responsively', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(1);\n                _context5.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliInputGroup @label=\"My Label\" @isResponsive={{true}}>\n                        <DenaliInput type=\"text\" placeholder=\"Text Field\" />\n                      </DenaliInputGroup>\n                    \n                */\n                {\"id\":\"k4HPWXnX\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-input-group\\\",[],[[\\\"@label\\\",\\\"@isResponsive\\\"],[\\\"My Label\\\",true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,\\\"denali-input\\\",[[24,\\\"placeholder\\\",\\\"Text Field\\\"],[24,4,\\\"text\\\"]],[[],[]],null],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('div.responsive').exists('An input group is rendered responsively');\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it adjusts the label width automatically', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(1);\n                _context6.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliInputGroup @label=\"My Label\" @hasAutoWidth={{true}}>\n                        <DenaliInput type=\"text\" placeholder=\"Text Field\" />\n                      </DenaliInputGroup>\n                    \n                */\n                {\"id\":\"RYLaOhWy\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-input-group\\\",[],[[\\\"@label\\\",\\\"@hasAutoWidth\\\"],[\\\"My Label\\\",true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,\\\"denali-input\\\",[[24,\\\"placeholder\\\",\\\"Text Field\\\"],[24,4,\\\"text\\\"]],[[],[]],null],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('div.auto').exists('An input group is rendered with label width adjusted automatically');\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-input-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-input', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliInput value=\"My Input\" />\n                */\n                {\"id\":\"1XoQ68AU\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[[24,2,\\\"My Input\\\"]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.input input').exists('An input is rendered within a wrapper div with class `.input`');\n                assert.dom('.input input').isNotDisabled('The input is not disabled by default');\n                assert.dom('.input input').hasValue('My Input', 'The input has the specified value');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('input types', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliInput type={{this.type}}/>\n                */\n                {\"id\":\"0B2HSxC+\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[[16,4,[32,0,[\\\"type\\\"]]]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                this.set('type', 'text');\n                assert.dom('.input input').hasAttribute('type', 'text', 'The input has the default type attribute text');\n                this.set('type', 'email');\n                assert.dom('.input input').hasAttribute('type', 'email', 'The input type attribute has the value email');\n                this.set('type', 'password');\n                assert.dom('.input input').hasAttribute('type', 'password', 'The input type attribute has the value password');\n                this.set('type', 'number');\n                assert.dom('.input input').hasAttribute('type', 'number', 'The input type attribute has the value number');\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('input size', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliInput @size={{this.size}} />\n                */\n                {\"id\":\"cjUixw4M\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[],[[\\\"@size\\\"],[[32,0,[\\\"size\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                this.set('size', 'small');\n                assert.dom('.input').hasClass('is-small', 'The input wrapper has the appropriate class for small');\n                this.set('size', 'medium');\n                assert.dom('.input').hasClass('is-medium', 'The input wrapper has the appropriate class for medium');\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('states', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliInput @state={{this.state}} />\n                */\n                {\"id\":\"x0EpaVqA\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[],[[\\\"@state\\\"],[[32,0,[\\\"state\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                this.set('state', 'active');\n                assert.dom('.input').hasClass('is-active', 'The input wrapper has the appropriate class for active');\n                this.set('state', 'error');\n                assert.dom('.input').hasClass('is-error', 'The input wrapper has the appropriate class for error');\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('disabled', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliInput disabled={{true}}/>\n                */\n                {\"id\":\"v+UN4WRv\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[[16,\\\"disabled\\\",true]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.input input').isDisabled('The input is disabled when specified');\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('placeholder', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliInput type=\"email\" placeholder=\"Email field\"/>\n                */\n                {\"id\":\"0IWBOoMA\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[[24,\\\"placeholder\\\",\\\"Email field\\\"],[24,4,\\\"email\\\"]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.input input').hasAttribute('placeholder', 'Email field', 'The input is has the specified placeholder');\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('is inverse', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliInput @isInverse={{this.isInverse}} />\n                */\n                {\"id\":\"/hw2wTj2\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[],[[\\\"@isInverse\\\"],[[32,0,[\\\"isInverse\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.input').doesNotHaveClass('is-inverse', 'The input wrapper by default does not have the inverse class');\n                this.set('isInverse', 'true');\n                assert.dom('.input').hasClass('is-inverse', 'The input wrapper has the inverse class when specified');\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('error message', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliInput @state=\"error\" @errorMsg={{this.errorMsg}} />\n                */\n                {\"id\":\"3HcDeBm6\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[],[[\\\"@state\\\",\\\"@errorMsg\\\"],[\\\"error\\\",[32,0,[\\\"errorMsg\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.input.is-error .message').doesNotExist();\n                this.set('errorMsg', 'Email Invalid');\n                assert.dom('.input.is-error .message').hasText('Email Invalid', 'The specified error message is rendered');\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('icons', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliInput\n                        @iconFront={{this.iconFront}}\n                        @iconFrontClass=\"front-icon\"\n                        @iconBack={{this.iconBack}}\n                        @iconBackClass=\"back-icon\"\n                      />\n                    \n                */\n                {\"id\":\"P3OIAm0Y\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-input\\\",[],[[\\\"@iconFront\\\",\\\"@iconFrontClass\\\",\\\"@iconBack\\\",\\\"@iconBackClass\\\"],[[32,0,[\\\"iconFront\\\"]],\\\"front-icon\\\",[32,0,[\\\"iconBack\\\"]],\\\"back-icon\\\"]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.input.has-icon-front').doesNotExist('The icon-front class is not applied to the input when no front icon is specified');\n                assert.dom('.input.has-icon-back').doesNotExist('The icon-back class is not applied to the input when no back icon is specified');\n                this.set('iconFront', 'share');\n                assert.dom('.input.has-icon-front').exists('The icon-front class is applied to the input when front icon is specified');\n                assert.dom('.input.has-icon-front .front-icon').hasClass('d-share', 'The correct denali icon is rendered as the front icon');\n                this.set('iconBack', 'close-circle-solid');\n                assert.dom('.input.has-icon-back').exists('The icon-back class is applied to the input when back icon is specified');\n                assert.dom('.input.has-icon-back .back-icon').hasClass('d-close-circle-solid', 'The correct denali icon is rendered as the back icon');\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('wrapperClass', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var wrapperClass;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliInput\n                        @wrapperClass={{this.wrapperClass}}\n                      />\n                    \n                */\n                {\"id\":\"879F1h0p\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-input\\\",[],[[\\\"@wrapperClass\\\"],[[32,0,[\\\"wrapperClass\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                wrapperClass = 'wrapperClass';\n                assert.dom('.input').doesNotHaveClass(wrapperClass, '`DenaliInput` does not have custom wrapper class by default');\n                this.set('wrapperClass', wrapperClass);\n                assert.dom('.input').hasClass(wrapperClass, '`DenaliInput` has custom specified wrapper class');\n\n              case 6:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('actions', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(2);\n                this.set('handleInput', function (event) {\n                  assert.equal(event.target.value, 'Random Text', 'the action passed in configured correctly');\n                });\n                _context11.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliInput\n                      {{on 'input' (action this.handleInput)}}\n                    />\n                */\n                {\"id\":\"HfxY+jvx\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-input\\\",[[4,[38,1],[\\\"input\\\",[30,[36,0],[[32,0],[32,0,[\\\"handleInput\\\"]]],null]],null]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"action\\\",\\\"on\\\"]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 4:\n                _context11.next = 6;\n                return (0, _testHelpers.fillIn)('.input input', 'Random Text');\n\n              case 6:\n                this.set('handleInput', function (event) {\n                  assert.equal(event.target.value, 'More Random Text', 'the action is configured correctly');\n                });\n                this.element.querySelector('.input input').value = 'More Random Text';\n                this.element.querySelector('.input input').dispatchEvent(new Event('input'));\n\n              case 9:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-link-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-link', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliLink\n                        href=\"https://denali.design/\"\n                        target=\"_blank\"\n                        @size={{this.size}}\n                      >\n                        Link Text\n                      </DenaliLink>\n                    \n                */\n                {\"id\":\"kgkZv7XH\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link\\\",[[24,6,\\\"https://denali.design/\\\"],[24,\\\"target\\\",\\\"_blank\\\"]],[[\\\"@size\\\"],[[32,0,[\\\"size\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('a.denali-link').hasText('Link Text', 'DenaliLink renders an anchor element');\n                assert.dom('a.denali-link').hasAttribute('href', 'https://denali.design/', 'DenaliLink has the specified href');\n                assert.dom('a.denali-link').hasAttribute('target', '_blank', 'DenaliLink has the specified target');\n                assert.dom('a.denali-link').doesNotHaveClass('is-small', 'DenaliLink does not have the is-small class by default');\n                this.set('size', 'small');\n                assert.dom('a.denali-link').hasClass('is-small', 'DenaliLink has the is-small class when the size is set to small');\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('secondary and sub links', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliLink\n                        @isSub={{this.sub}}\n                        @isSecondary={{this.secondary}}\n                      >\n                        Link Text\n                      </DenaliLink>\n                */\n                {\"id\":\"zS83u3UU\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link\\\",[],[[\\\"@isSub\\\",\\\"@isSecondary\\\"],[[32,0,[\\\"sub\\\"]],[32,0,[\\\"secondary\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('a.denali-link').doesNotHaveClass('is-sub', 'DenaliLink by default is not a sub link');\n                assert.dom('a.denali-link').doesNotHaveClass('is-secondary', 'DenaliLink by default is not a secondary link');\n                this.set('sub', true);\n                assert.dom('a.denali-link').hasClass('is-sub', 'DenaliLink is a sub link when isSub arg is set to true');\n                this.set('secondary', true);\n                assert.dom('a.denali-link').hasClass('is-sub', 'DenaliLink retains the is-sub class');\n                assert.dom('a.denali-link').hasClass('is-secondary', 'DenaliLink is a secondary link when secondary arg is set to true');\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('states', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliLink\n                        @state={{this.state}}\n                      >\n                        Link Text\n                      </DenaliLink>\n                    \n                */\n                {\"id\":\"Lxz23q/u\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link\\\",[],[[\\\"@state\\\"],[[32,0,[\\\"state\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('a.denali-link').doesNotHaveClass('is-active', 'DenaliLink by default is not active');\n                assert.dom('a.denali-link').doesNotHaveClass('is-disabled', 'DenaliLink by default is not disabled');\n                this.set('state', 'active');\n                assert.dom('a.denali-link').hasClass('is-active', 'DenaliLink is active when state is set to active');\n                this.set('state', 'disabled');\n                assert.dom('a.denali-link').hasClass('is-disabled', 'DenaliLink is disabled when state is set to disabled');\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('icons', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliLink\n                        @iconFront={{this.iconFront}}\n                        @iconFrontClass={{this.iconFrontClass}}\n                        @iconBack={{this.iconBack}}\n                        @iconBackClass={{this.iconBackClass}}\n                      >\n                        Link Text\n                      </DenaliLink>\n                    \n                */\n                {\"id\":\"DQL/PzJI\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link\\\",[],[[\\\"@iconFront\\\",\\\"@iconFrontClass\\\",\\\"@iconBack\\\",\\\"@iconBackClass\\\"],[[32,0,[\\\"iconFront\\\"]],[32,0,[\\\"iconFrontClass\\\"]],[32,0,[\\\"iconBack\\\"]],[32,0,[\\\"iconBackClass\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('a.denali-link').doesNotHaveClass('has-icon-front', 'DenaliLink does not have the `has-icon-front` class by default');\n                assert.dom('a.denali-link').doesNotHaveClass('has-icon-back', 'DenaliLink does not have the `has-icon-back` class by default');\n                this.set('iconFront', 'add-circle');\n                this.set('iconFrontClass', 'link-icon-front');\n                assert.dom('a.denali-link').hasClass('has-icon-front', 'DenaliLink has the `has-icon-front` class when iconFront is specified');\n                assert.dom('a.denali-link .d-icon.link-icon-front').hasClass('d-add-circle', 'DenaliLink has the specified icon in the front');\n                this.set('iconBack', 'external');\n                this.set('iconBackClass', 'link-icon-back');\n                assert.dom('a.denali-link').hasClass('has-icon-back', 'DenaliLink has the `has-icon-back` class when iconBack is specified');\n                assert.dom('a.denali-link .d-icon.link-icon-back').hasClass('d-external', 'DenaliLink has the specified icon in the back');\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-link-to-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/setup-router\"], function (_qunit, _emberQunit, _testHelpers, _setupRouter) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-link-to', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _setupRouter.default)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliLinkTo @route=\"index\" @query={{hash user=\"jkusa\"}}>\n                        Link Text\n                      </DenaliLinkTo>\n                    \n                */\n                {\"id\":\"4XVWRCIr\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\",\\\"@query\\\"],[\\\"index\\\",[30,[36,0],null,[[\\\"user\\\"],[\\\"jkusa\\\"]]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"hash\\\"]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('a.ember-view').hasText('Link Text', 'DenaliLinkTo exists and renders inner content');\n                assert.dom('a.denali-link').hasAttribute('href', '/?user=jkusa', 'DenaliLinkTo renders an href based on a route & query');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it is set as active when on current route', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.set('route', 'four-oh-four');\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliLinkTo @route={{this.route}}>\n                        Link Text\n                      </DenaliLinkTo>\n                    \n                */\n                {\"id\":\"iCFFZkJI\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\"],[[32,0,[\\\"route\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('a.denali-link').doesNotHaveClass('is-active', 'DenaliLinkTo is not active when not on the current route');\n                this.set('route', 'index');\n                assert.dom('a.denali-link').hasClass('is-active', 'DenaliLinkTo is active when on the current route');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('size', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliLinkTo\n                        @route=\"four-oh-four\"\n                        @size={{this.size}}\n                      >\n                        Link Text\n                      </DenaliLinkTo>\n                    \n                */\n                {\"id\":\"orqDktOr\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\",\\\"@size\\\"],[\\\"four-oh-four\\\",[32,0,[\\\"size\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('a.denali-link').doesNotHaveClass('is-small', 'DenaliLinkTo does not have the is-small class by default');\n                this.set('size', 'small');\n                assert.dom('a.denali-link').hasClass('is-small', 'DenaliLinkTo has the is-small class when the size is set to small');\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('secondary and sub links', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliLinkTo\n                        @route=\"four-oh-four\"\n                        @isSub={{this.sub}}\n                        @isSecondary={{this.secondary}}\n                      >\n                        Link Text\n                      </DenaliLinkTo>\n                    \n                */\n                {\"id\":\"Jyi+4nDu\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\",\\\"@isSub\\\",\\\"@isSecondary\\\"],[\\\"four-oh-four\\\",[32,0,[\\\"sub\\\"]],[32,0,[\\\"secondary\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('a.denali-link').doesNotHaveClass('is-sub', 'DenaliLinkTo by default is not a sub link');\n                assert.dom('a.denali-link').doesNotHaveClass('is-secondary', 'DenaliLinkTo by default is not a secondary link');\n                this.set('sub', true);\n                assert.dom('a.denali-link').hasClass('is-sub', 'DenaliLinkTo is a sub link when isSub arg is set to true');\n                this.set('secondary', true);\n                assert.dom('a.denali-link').hasClass('is-sub', 'DenaliLinkTo retains the is-sub class');\n                assert.dom('a.denali-link').hasClass('is-secondary', 'DenaliLinkTo is a secondary link when secondary arg is set to true');\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('state', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliLinkTo\n                        @route=\"four-oh-four\"\n                        @state={{this.state}}\n                      >\n                        Link Text\n                      </DenaliLinkTo>\n                    \n                */\n                {\"id\":\"1yNpXFJw\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\",\\\"@state\\\"],[\\\"four-oh-four\\\",[32,0,[\\\"state\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('a.denali-link').doesNotHaveClass('is-disabled', 'DenaliLinkTo is not disabled by default');\n                this.set('state', 'disabled');\n                assert.dom('a.denali-link').hasClass('is-disabled', 'DenaliLinkTo is disabled when state is set to disabled');\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('disabled', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliLinkTo\n                        @route=\"four-oh-four\"\n                        @disabled={{this.disabled}}\n                      >\n                        Link Text\n                      </DenaliLinkTo>\n                    \n                */\n                {\"id\":\"+6Voa3mb\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\",\\\"@disabled\\\"],[\\\"four-oh-four\\\",[32,0,[\\\"disabled\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('a.denali-link').doesNotHaveClass('is-disabled', 'DenaliLinkTo is not disabled by default');\n                this.set('disabled', true);\n                assert.dom('a.denali-link').hasClass('is-disabled', 'DenaliLinkTo is disabled when disabled is set to true');\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('icons', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliLinkTo\n                        @route=\"four-oh-four\"\n                        @iconFront={{this.iconFront}}\n                        @iconFrontClass={{this.iconFrontClass}}\n                        @iconBack={{this.iconBack}}\n                        @iconBackClass={{this.iconBackClass}}\n                      >\n                        Link Text\n                      </DenaliLinkTo>\n                    \n                */\n                {\"id\":\"RXfRyrdv\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-link-to\\\",[],[[\\\"@route\\\",\\\"@iconFront\\\",\\\"@iconFrontClass\\\",\\\"@iconBack\\\",\\\"@iconBackClass\\\"],[\\\"four-oh-four\\\",[32,0,[\\\"iconFront\\\"]],[32,0,[\\\"iconFrontClass\\\"]],[32,0,[\\\"iconBack\\\"]],[32,0,[\\\"iconBackClass\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Link Text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('a.denali-link').doesNotHaveClass('has-icon-front', 'DenaliLinkTo does not have the `has-icon-front` class by default');\n                assert.dom('a.denali-link').doesNotHaveClass('has-icon-back', 'DenaliLinkTo does not have the `has-icon-back` class by default');\n                this.set('iconFront', 'add-circle');\n                this.set('iconFrontClass', 'link-icon-front');\n                assert.dom('a.denali-link').hasClass('has-icon-front', 'DenaliLinkTo has the `has-icon-front` class when iconFront is specified');\n                assert.dom('a .d-icon.link-icon-front').hasClass('d-add-circle', 'DenaliLinkTo has the specified icon in the front');\n                this.set('iconBack', 'external');\n                this.set('iconBackClass', 'link-icon-back');\n                assert.dom('a.denali-link').hasClass('has-icon-back', 'DenaliLinkTo has the `has-icon-back` class when iconBack is specified');\n                assert.dom('a .d-icon.link-icon-back').hasClass('d-external', 'DenaliLinkTo has the specified icon in the back');\n\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-loader-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-loader', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliLoader />\n                */\n                {\"id\":\"fyROpEqQ\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-loader\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('div.loader').exists('DenaliLoader can render.');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports sizes', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliLoader @size={{this.size}} />\n                    \n                */\n                {\"id\":\"7bPW89Dw\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-loader\\\",[],[[\\\"@size\\\"],[[32,0,[\\\"size\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                this.set('size', 'extrasmall');\n                assert.dom('.loader').hasClass('is-extrasmall', 'DenaliLoader has an extrasmall size when `@size` arg is set to extrasmall');\n                this.set('size', 'small');\n                assert.dom('.loader').hasClass('is-small', 'DenaliLoader has a small size when `@size` arg is set to small');\n                this.set('size', 'medium');\n                assert.dom('.loader').hasClass('is-medium', 'DenaliLoader has a medium size when `@size` arg is set to medium');\n                this.set('size', 'large');\n                assert.dom('.loader').hasClass('is-large', 'DenaliLoader has a large size when `@size` arg is set to large');\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports inverse colors', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliLoader @isInverse={{this.isInverse}} />\n                    \n                */\n                {\"id\":\"VlaaWLtq\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-loader\\\",[],[[\\\"@isInverse\\\"],[[32,0,[\\\"isInverse\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.loader').doesNotHaveClass('is-inverse', 'DenaliLoader does not have inverse styling by default');\n                this.set('isInverse', 'true');\n                assert.dom('.loader').hasClass('is-inverse', 'DenaliLoader has inverse styling when `@isInverse` arg is set to true');\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-menu-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-menu', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(4);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliMenu class=\"test-menu\" as |Menu|>\n                        <Menu.Trigger>Hover</Menu.Trigger>\n                        <Menu.Content>\n                          <ul>\n                            <li>One</li>\n                            <li>Two</li>\n                            <li>Three</li>\n                          </ul>\n                        </Menu.Content>\n                      </DenaliMenu>\n                    \n                */\n                {\"id\":\"tP2jjX3V\",\"block\":\"{\\\"symbols\\\":[\\\"Menu\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-menu\\\",[[24,0,\\\"test-menu\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Trigger\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Hover\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Content\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[10,\\\"ul\\\"],[12],[2,\\\"\\\\n            \\\"],[10,\\\"li\\\"],[12],[2,\\\"One\\\"],[13],[2,\\\"\\\\n            \\\"],[10,\\\"li\\\"],[12],[2,\\\"Two\\\"],[13],[2,\\\"\\\\n            \\\"],[10,\\\"li\\\"],[12],[2,\\\"Three\\\"],[13],[2,\\\"\\\\n          \\\"],[13],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.test-menu').exists('The test menu is rendered');\n                assert.dom('.test-menu .menu-trigger').hasText('Hover', 'The trigger has the appropriate text');\n                assert.dom('.test-menu .menu-content li').exists({\n                  count: 3\n                }, 'Three li elements are rendered in the menu content');\n                assert.dom('.test-menu .menu-content').hasStyle({\n                  visibility: 'hidden'\n                }, 'The menu content is not visible by default');\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('alignment', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(4);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliMenu class=\"test-menu\" @alignContent={{this.alignContent}} as |Menu|>\n                        <Menu.Trigger>Hover</Menu.Trigger>\n                        <Menu.Content>\n                          <ul>\n                            <li>One</li>\n                            <li>Two</li>\n                            <li>Three</li>\n                          </ul>\n                        </Menu.Content>\n                      </DenaliMenu>\n                    \n                */\n                {\"id\":\"HN2aXFI8\",\"block\":\"{\\\"symbols\\\":[\\\"Menu\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-menu\\\",[[24,0,\\\"test-menu\\\"]],[[\\\"@alignContent\\\"],[[32,0,[\\\"alignContent\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Trigger\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Hover\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Content\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[10,\\\"ul\\\"],[12],[2,\\\"\\\\n            \\\"],[10,\\\"li\\\"],[12],[2,\\\"One\\\"],[13],[2,\\\"\\\\n            \\\"],[10,\\\"li\\\"],[12],[2,\\\"Two\\\"],[13],[2,\\\"\\\\n            \\\"],[10,\\\"li\\\"],[12],[2,\\\"Three\\\"],[13],[2,\\\"\\\\n          \\\"],[13],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.test-menu').doesNotHaveClass('is-left', 'The menu does not have the `is-left` class by default');\n                assert.dom('.test-menu').doesNotHaveClass('is-right', 'The menu does not have the `is-right` class by default');\n                this.set('alignContent', 'left');\n                assert.dom('.test-menu').hasClass('is-left', 'The menu has the `is-left` class when alignContent is set to left');\n                this.set('alignContent', 'right');\n                assert.dom('.test-menu').hasClass('is-right', 'The menu has the `is-right` class when alignContent is set to right');\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-menu/content-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-menu/content', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliMenu::Content>\n                        Inner Content\n                      </DenaliMenu::Content>\n                    \n                */\n                {\"id\":\"rQ5ITv0f\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-menu/content\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('div.menu-content').hasText('Inner Content', 'Menu content div is rendered');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-menu/trigger-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-menu/trigger', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliMenu::Trigger>\n                        Trigger\n                      </DenaliMenu::Trigger>\n                    \n                */\n                {\"id\":\"9njlsgFY\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-menu/trigger\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Trigger\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('a.menu-trigger').hasText('Trigger', 'The trigger renders the text within an anchor tag');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-modal-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-modal', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(6);\n                this.set('isOpen', false);\n                this.set('onClose', function () {\n                  return _this.set('isOpen', false);\n                });\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliModal\n                        class=\"denali-modal\"\n                        @isOpen={{this.isOpen}}\n                        @onClose={{this.onClose}}\n                        as | Modal |\n                      >\n                        <Modal.Content class=\"denali-modal__content\">Content</Modal.Content>\n                      </DenaliModal>\n                    \n                */\n                {\"id\":\"Ok3SioP5\",\"block\":\"{\\\"symbols\\\":[\\\"Modal\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-modal\\\",[[24,0,\\\"denali-modal\\\"]],[[\\\"@isOpen\\\",\\\"@onClose\\\"],[[32,0,[\\\"isOpen\\\"]],[32,0,[\\\"onClose\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Content\\\"]],[[24,0,\\\"denali-modal__content\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Content\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 5:\n                assert.dom('.denali-modal.modal').doesNotExist('Denali Modal is hidden by default');\n                assert.dom('.denali-modal .modal').doesNotExist('Denali Modal is not rendered by default');\n                this.set('isOpen', true);\n                assert.dom('.denali-modal.modal').exists('Denali Modal is rendered only when isActive is set to true');\n                assert.dom('.modal-content.denali-modal__content').hasText('Content', 'Denali Modal Content is rendered in the modal');\n                assert.dom('.denali-modal.modal .close').exists('Denali Modal renders a close icon in the modal');\n                _context.next = 13;\n                return (0, _testHelpers.click)('.denali-modal.modal .close');\n\n              case 13:\n                assert.dom('.denali-modal.modal').doesNotExist('The Denali Modal is hidden when close is clicked');\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Full screen', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliModal\n                        class=\"denali-modal\"\n                        @isOpen={{true}}\n                        @isFullScreen={{this.fullScreen}}\n                        as | Modal |\n                      >\n                        <Modal.Content>Content</Modal.Content>\n                      </DenaliModal>\n                    \n                */\n                {\"id\":\"YiC+HVOP\",\"block\":\"{\\\"symbols\\\":[\\\"Modal\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-modal\\\",[[24,0,\\\"denali-modal\\\"]],[[\\\"@isOpen\\\",\\\"@isFullScreen\\\"],[true,[32,0,[\\\"fullScreen\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Content\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Content\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.denali-modal .modal-container').doesNotHaveClass('.is-full', 'The modal container does not have the `is-full` class by default');\n                this.set('fullScreen', true);\n                assert.dom('.denali-modal .modal-container').hasClass('is-full', 'The modal container has the `is-full` when fullScreen arg is set to true');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('header and footer', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliModal\n                        class=\"denali-modal\"\n                        @isOpen={{true}}\n                        as | Modal |\n                      >\n                        <Modal.Header class=\"denali-modal__header\">Header</Modal.Header>\n                        <Modal.Content>Content</Modal.Content>\n                        <Modal.Footer class=\"denali-modal__footer\">Footer</Modal.Footer>\n                      </DenaliModal>\n                    \n                */\n                {\"id\":\"HU1jfjaz\",\"block\":\"{\\\"symbols\\\":[\\\"Modal\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-modal\\\",[[24,0,\\\"denali-modal\\\"]],[[\\\"@isOpen\\\"],[true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Header\\\"]],[[24,0,\\\"denali-modal__header\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Header\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Content\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Content\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Footer\\\"]],[[24,0,\\\"denali-modal__footer\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Footer\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.modal-header.denali-modal__header').hasText('Header', 'Denali Modal header is rendered');\n                assert.dom('.modal-footer.denali-modal__footer').hasText('Footer', 'Denali Modal footer is rendered');\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-navbar-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/setup-router\"], function (_qunit, _emberQunit, _testHelpers, _setupRouter) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-navbar', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _setupRouter.default)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliNavbar\n                        class=\"test-nav\"\n                      >\n                      </DenaliNavbar>\n                    \n                */\n                {\"id\":\"yQF8mCbx\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('nav.nav.test-nav').exists('DenaliNavbar exists and renders a nav element');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can support responsive', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliNavbar\n                        class=\"test-nav\"\n                        @isResponsive={{this.isResponsive}}\n                        as |Nav|\n                      >\n                        <Nav.Left></Nav.Left>\n                      </DenaliNavbar>\n                    \n                */\n                {\"id\":\"oeVKEwAq\",\"block\":\"{\\\"symbols\\\":[\\\"Nav\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[\\\"@isResponsive\\\"],[[32,0,[\\\"isResponsive\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Left\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.test-nav .nav-left .nav-responsive-menu').doesNotExist('DenaliNavbar does not render a responsive menu button by default');\n                assert.dom('.test-nav.nav .nav-responsive').doesNotExist('DenaliNavbar does not render a responsive div by default');\n                this.set('isResponsive', true);\n                assert.dom('.test-nav .nav-left .nav-responsive-menu').exists('DenaliNavbar renders a responsive menu button when `@isResponsive` arg is true');\n                assert.dom('.test-nav.nav .nav-responsive').exists('DenaliNavbar renders a responsive div when `@isResponsive` arg is true');\n                assert.dom('.test-nav.nav .nav-responsive.is-active').doesNotExist('DenaliNavbar responsive div is not active default');\n                _context2.next = 10;\n                return (0, _testHelpers.click)('.test-nav .nav-responsive-menu');\n\n              case 10:\n                assert.dom('.test-nav.nav .nav-responsive.is-active').exists('DenaliNavbar responsive div is toggled active when clicking the responsive menu');\n                _context2.next = 13;\n                return (0, _testHelpers.click)('.test-nav .nav-responsive-menu');\n\n              case 13:\n                assert.dom('.test-nav.nav .nav-responsive.is-active').doesNotExist('DenaliNavbar responsive div is toggled inactive when clicking the responsive menu');\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can yield left, center, & right section components', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliNavbar\n                        class=\"test-nav\"\n                        as |Nav|\n                      >\n                        <Nav.Left></Nav.Left>\n                        <Nav.Center></Nav.Center>\n                        <Nav.Right></Nav.Right>\n                      </DenaliNavbar>\n                    \n                */\n                {\"id\":\"MRuzntVe\",\"block\":\"{\\\"symbols\\\":[\\\"Nav\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Left\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Center\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Right\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.test-nav.nav .nav-left').exists('DenaliNavbar can yield a left section component');\n                assert.dom('.test-nav.nav .nav-center').exists('DenaliNavbar can yield a center section component');\n                assert.dom('.test-nav.nav .nav-right').exists('DenaliNavbar can yield a right section component');\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('left can yield sub components', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliNavbar\n                        class=\"test-nav\"\n                        as |Nav|\n                      >\n                        <Nav.Left as |Section|>\n                          <Section.Logo src=\"img.png\"/>\n                          <Section.Item>\n                            Nav Item\n                          </Section.Item>\n                          <Section.Icon @icon=\"code\" />\n                          <Section.Control>\n                            Nav Control\n                          </Section.Control>\n                          <Section.Link href=\"http://denali.design\" />\n                          <Section.LinkTo @route=\"four-oh-four\" />\n                        </Nav.Left>\n                      </DenaliNavbar>\n                    \n                */\n                {\"id\":\"OODAhRGw\",\"block\":\"{\\\"symbols\\\":[\\\"Nav\\\",\\\"Section\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Left\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Logo\\\"]],[[24,\\\"src\\\",\\\"img.png\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Item\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Item\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Icon\\\"]],[],[[\\\"@icon\\\"],[\\\"code\\\"]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Control\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Control\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Link\\\"]],[[24,6,\\\"http://denali.design\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"LinkTo\\\"]],[],[[\\\"@route\\\"],[\\\"four-oh-four\\\"]],null],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[2]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.test-nav .nav-left .nav-brand').hasAttribute('src', 'img.png', 'Left can yield a nav logo component');\n                assert.dom('.test-nav .nav-left .nav-item').hasText('Nav Item', 'Left can yield a nav item component');\n                assert.dom('.test-nav .nav-left .nav-icon .d-icon').hasClass('d-code', 'Left can yield a nav icon component');\n                assert.dom('.test-nav .nav-left .nav-control').hasText('Nav Control', 'Left can yield a nav control component');\n                assert.dom('.test-nav .nav-left a.nav-item').hasAttribute('href', 'http://denali.design', 'Left can yield a nav link component');\n                assert.dom('.test-nav .nav-left a.ember-view.nav-item').hasAttribute('href', '/four-oh-four', 'Left can yield a nav link-to component');\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('left can yield sub components when `@isResponsive` is true', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliNavbar\n                        class=\"test-nav\"\n                        @isResponsive={{true}}\n                        as |Nav|\n                      >\n                        <Nav.Left as |Section|>\n                          <Section.Logo src=\"img.png\"/>\n                          <Section.Item>\n                            Nav Item\n                          </Section.Item>\n                          <Section.Icon @icon=\"code\" />\n                          <Section.Control>\n                            Nav Control\n                          </Section.Control>\n                          <Section.Link href=\"http://denali.design\" />\n                          <Section.LinkTo @route=\"four-oh-four\" />\n                        </Nav.Left>\n                      </DenaliNavbar>\n                    \n                */\n                {\"id\":\"VPo0X2Cx\",\"block\":\"{\\\"symbols\\\":[\\\"Nav\\\",\\\"Section\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[\\\"@isResponsive\\\"],[true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Left\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Logo\\\"]],[[24,\\\"src\\\",\\\"img.png\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Item\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Item\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Icon\\\"]],[],[[\\\"@icon\\\"],[\\\"code\\\"]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Control\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Control\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Link\\\"]],[[24,6,\\\"http://denali.design\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"LinkTo\\\"]],[],[[\\\"@route\\\"],[\\\"four-oh-four\\\"]],null],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[2]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.test-nav .nav-left .nav-brand').hasAttribute('src', 'img.png', 'Left can yield a nav logo component');\n                assert.dom('.test-nav .nav-left .nav-item').hasText('Nav Item', 'Left can yield a nav item component');\n                assert.dom('.test-nav .nav-left .nav-icon .d-icon').hasClass('d-code', 'Left can yield a nav icon component');\n                assert.dom('.test-nav .nav-left .nav-control').hasText('Nav Control', 'Left can yield a nav control component');\n                assert.dom('.test-nav .nav-left a.nav-item').hasAttribute('href', 'http://denali.design', 'Left can yield a nav link component');\n                assert.dom('.test-nav .nav-left a.ember-view.nav-item').hasAttribute('href', '/four-oh-four', 'Left can yield a nav link-to component');\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('center can yield sub components', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliNavbar\n                        class=\"test-nav\"\n                        as |Nav|\n                      >\n                        <Nav.Center as |Section|>\n                          <Section.Logo src=\"img.png\"/>\n                          <Section.Item>\n                            Nav Item\n                          </Section.Item>\n                          <Section.Icon @icon=\"code\" />\n                          <Section.Control>\n                            Nav Control\n                          </Section.Control>\n                          <Section.Link href=\"http://denali.design\" />\n                          <Section.LinkTo @route=\"four-oh-four\" />\n                        </Nav.Center>\n                      </DenaliNavbar>\n                    \n                */\n                {\"id\":\"i+dWApSz\",\"block\":\"{\\\"symbols\\\":[\\\"Nav\\\",\\\"Section\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Center\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Logo\\\"]],[[24,\\\"src\\\",\\\"img.png\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Item\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Item\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Icon\\\"]],[],[[\\\"@icon\\\"],[\\\"code\\\"]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Control\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Control\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Link\\\"]],[[24,6,\\\"http://denali.design\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"LinkTo\\\"]],[],[[\\\"@route\\\"],[\\\"four-oh-four\\\"]],null],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[2]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.test-nav .nav-center .nav-brand').hasAttribute('src', 'img.png', 'Center can yield a nav logo component');\n                assert.dom('.test-nav .nav-center .nav-item').hasText('Nav Item', 'Center can yield a nav item component');\n                assert.dom('.test-nav .nav-center .nav-icon .d-icon').hasClass('d-code', 'Center can yield a nav icon component');\n                assert.dom('.test-nav .nav-center .nav-control').hasText('Nav Control', 'Center can yield a nav control component');\n                assert.dom('.test-nav .nav-center a.nav-item').hasAttribute('href', 'http://denali.design', 'Center can yield a nav link component');\n                assert.dom('.test-nav .nav-center a.ember-view.nav-item').hasAttribute('href', '/four-oh-four', 'Center can yield a nav link-to component');\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('right can yield sub components', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliNavbar\n                        class=\"test-nav\"\n                        as |Nav|\n                      >\n                        <Nav.Right as |Section|>\n                          <Section.Logo src=\"img.png\"/>\n                          <Section.Item>\n                            Nav Item\n                          </Section.Item>\n                          <Section.Icon @icon=\"code\" />\n                          <Section.Control>\n                            Nav Control\n                          </Section.Control>\n                          <Section.Link href=\"http://denali.design\" />\n                          <Section.LinkTo @route=\"four-oh-four\" />\n                        </Nav.Right>\n                      </DenaliNavbar>\n                    \n                */\n                {\"id\":\"+mBMLq+E\",\"block\":\"{\\\"symbols\\\":[\\\"Nav\\\",\\\"Section\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar\\\",[[24,0,\\\"test-nav\\\"]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Right\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Logo\\\"]],[[24,\\\"src\\\",\\\"img.png\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Item\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Item\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Icon\\\"]],[],[[\\\"@icon\\\"],[\\\"code\\\"]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Control\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n            Nav Control\\\\n          \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"Link\\\"]],[[24,6,\\\"http://denali.design\\\"]],[[],[]],null],[2,\\\"\\\\n          \\\"],[8,[32,2,[\\\"LinkTo\\\"]],[],[[\\\"@route\\\"],[\\\"four-oh-four\\\"]],null],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[2]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.test-nav .nav-right .nav-brand').hasAttribute('src', 'img.png', 'Right can yield a nav logo component');\n                assert.dom('.test-nav .nav-right .nav-item').hasText('Nav Item', 'Right can yield a nav item component');\n                assert.dom('.test-nav .nav-right .nav-icon .d-icon').hasClass('d-code', 'Right can yield a nav icon component');\n                assert.dom('.test-nav .nav-right .nav-control').hasText('Nav Control', 'Right can yield a nav control component');\n                assert.dom('.test-nav .nav-right a.nav-item').hasAttribute('href', 'http://denali.design', 'Right can yield a nav link component');\n                assert.dom('.test-nav .nav-right a.ember-view.nav-item').hasAttribute('href', '/four-oh-four', 'Right can yield a nav link-to component');\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-navbar/control-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-navbar/control', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliNavbar::Control>\n                        Inner Content\n                      </DenaliNavbar::Control>\n                    \n                */\n                {\"id\":\"BI/6rltx\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar/control\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('div.nav-control').hasText('Inner Content', 'DenaliNavbar::Control exists and renders inner content');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-navbar/icon-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-navbar/icon', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.set('icon', 'code');\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliNavbar::Icon\n                        @icon={{this.icon}}\n                      />\n                    \n                */\n                {\"id\":\"mln9tsIW\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar/icon\\\",[],[[\\\"@icon\\\"],[[32,0,[\\\"icon\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.nav-icon .d-icon.d-code').exists('DenaliNavbar::Icon exists and has the correct icon class');\n                this.set('icon', 'bug');\n                assert.dom('.nav-icon .d-icon.d-bug').exists('DenaliNavbar::Icon exists and has the correct icon class');\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('name renders', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliNavbar::Icon\n                        @icon=\"code\"\n                        @name={{this.name}}\n                      />\n                    \n                */\n                {\"id\":\"vqECCH1n\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar/icon\\\",[],[[\\\"@icon\\\",\\\"@name\\\"],[\\\"code\\\",[32,0,[\\\"name\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.nav-icon .d-icon.d-code').exists('DenaliNavbar::Icon exists and has the correct icon class');\n                assert.dom('.icon-name').doesNotExist('DenaliNavbar::Icon exists and does not have a name.');\n                this.set('name', 'My Icon');\n                assert.dom('.icon-name').hasText('My Icon', 'DenaliNavbar::Icon exists and has a name.');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-navbar/item-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-navbar/item', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliNavbar::Item>\n                        Inner Content\n                      </DenaliNavbar::Item>\n                    \n                */\n                {\"id\":\"rhHP+bze\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar/item\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('span.nav-item').hasText('Inner Content', 'DenaliNavbar::Item exists and renders inner content');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it an be set active ', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliNavbar::Item\n                        @isActive={{this.isActive}}\n                      >\n                        Inner Content\n                      </DenaliNavbar::Item>\n                    \n                */\n                {\"id\":\"CMufCq6h\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-navbar/item\\\",[],[[\\\"@isActive\\\"],[[32,0,[\\\"isActive\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('span.nav-item').doesNotHaveClass('is-active', 'DenaliNavbar::Item is not active by default');\n                this.set('isActive', true);\n                assert.dom('span.nav-item').hasClass('is-active', 'DenaliNavbar::Item is active when `@isActive` arg is true');\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-navbar/logo-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-navbar/logo', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliNavbar::Logo @src=\"logo.png\"/>\n                */\n                {\"id\":\"wnv4qqP2\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-navbar/logo\\\",[],[[\\\"@src\\\"],[\\\"logo.png\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('img').hasClass('nav-brand', 'DenaliNavbar::Logo renders an img with the correct class');\n                assert.dom('img.nav-brand').hasAttribute('src', 'logo.png', 'DenaliNavbar::Logo renders src attr with the correct value');\n                assert.dom('img.nav-brand').hasAttribute('alt', 'logo', 'DenaliNavbar::Logo renders alt attr with the default value');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-radio-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-radio', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliRadio as |Radio|>\n                        <Radio.Option @value=\"\">Inner Content</Radio.Option>\n                      </DenaliRadio>\n                    \n                */\n                {\"id\":\"arjsrftb\",\"block\":\"{\\\"symbols\\\":[\\\"Radio\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[\\\"\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Inner Content\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('div.radio').exists({\n                  count: 1\n                }, 'DenaliRadio Option exists');\n                assert.dom('div.radio').hasText('Inner Content', 'DenaliRadio Option renders inner content');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('handles change events', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(6);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliRadio @onChanged={{this.onChanged}} as |Radio|>\n                        <Radio.Option @value={{1}}>1</Radio.Option>\n                        <Radio.Option @value=\"surprise\">2</Radio.Option>\n                        <Radio.Option @value={{3}}>3</Radio.Option>\n                      </DenaliRadio>\n                    \n                */\n                {\"id\":\"zwV2Vaxf\",\"block\":\"{\\\"symbols\\\":[\\\"Radio\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio\\\",[],[[\\\"@onChanged\\\"],[[32,0,[\\\"onChanged\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[\\\"surprise\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[3]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"3\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('onChanged', function (value) {\n                  return assert.equal(value, 3, 'the last value is clicked');\n                });\n                _context2.next = 6;\n                return (0, _testHelpers.click)('.radio input[value=\"3\"]');\n\n              case 6:\n                assert.dom('.radio input[value=\"3\"]').isChecked('true', 'The element is marked as checked after being clicked');\n                this.set('onChanged', function (value) {\n                  return assert.equal(value, 1, 'the first value is clicked');\n                });\n                _context2.next = 10;\n                return (0, _testHelpers.click)('.radio input[value=\"1\"]');\n\n              case 10:\n                assert.dom('.radio input[value=\"1\"]').isChecked('true', 'The element is marked as checked after being clicked');\n                this.set('onChanged', function (value) {\n                  return assert.equal(value, 'surprise', 'the middle value is clicked');\n                });\n                _context2.next = 14;\n                return (0, _testHelpers.click)('.radio input[value=\"surprise\"]');\n\n              case 14:\n                assert.dom('.radio input[value=\"surprise\"]').isChecked('The element is marked as checked after being clicked');\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('disabled elements', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliRadio @onChanged={{this.onChanged}} as |Radio|>\n                        <Radio.Option @value={{1}}>1</Radio.Option>\n                        <Radio.Option @value=\"surprise\" @disabled={{true}}>2</Radio.Option>\n                      </DenaliRadio>\n                    \n                */\n                {\"id\":\"mQXUTACK\",\"block\":\"{\\\"symbols\\\":[\\\"Radio\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio\\\",[],[[\\\"@onChanged\\\"],[[32,0,[\\\"onChanged\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\",\\\"@disabled\\\"],[\\\"surprise\\\",true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.radio input[value=\"surprise\"]').hasAttribute('disabled', '', 'The element is marked as disabled');\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('checked elements', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(6);\n                this.checked = false;\n                _context4.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliRadio as |Radio|>\n                        <Radio.Option @value={{1}}>1</Radio.Option>\n                        <Radio.Option @value={{2}} @checked={{this.checked}}>2</Radio.Option>\n                        <Radio.Option @value=\"surprise\" @disabled={{true}}>2</Radio.Option>\n                      </DenaliRadio>\n                    \n                */\n                {\"id\":\"ib8eFMGi\",\"block\":\"{\\\"symbols\\\":[\\\"Radio\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\",\\\"@checked\\\"],[2,[32,0,[\\\"checked\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\",\\\"@disabled\\\"],[\\\"surprise\\\",true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 4:\n                assert.dom('.radio input[value=\"1\"]').isNotChecked('The option is not marked as checked');\n                assert.dom('.radio input[value=\"2\"]').isNotChecked('The option is not marked as checked');\n                assert.dom('.radio input[value=\"surprise\"]').isNotChecked('The option is not marked as checked');\n                this.set('checked', true);\n                assert.dom('.radio input[value=\"1\"]').isNotChecked('The option is still not marked as checked');\n                assert.dom('.radio input[value=\"2\"]').isChecked('The option is marked as checked after being set by attribute');\n                assert.dom('.radio input[value=\"surprise\"]').isNotChecked('The option is still not marked as checked');\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('clicking label', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(3);\n                _context5.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliRadio @onChanged={{this.onChanged}} as |Radio|>\n                        <Radio.Option @value={{1}}>1</Radio.Option>\n                      </DenaliRadio>\n                    \n                */\n                {\"id\":\"6LPb/vgE\",\"block\":\"{\\\"symbols\\\":[\\\"Radio\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio\\\",[],[[\\\"@onChanged\\\"],[[32,0,[\\\"onChanged\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('onChanged', function (value) {\n                  return assert.equal(value, 1, 'the event is triggered when clicking a label');\n                });\n                assert.dom('.radio input').isNotChecked('The option is not marked as checked');\n                _context5.next = 7;\n                return (0, _testHelpers.click)('.radio label');\n\n              case 7:\n                assert.dom('.radio input').isChecked('The option is marked as checked after clicking the label');\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-radio-toggle-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-radio-toggle', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliRadioToggle as |Toggle|>\n                        <Toggle.Option @value=\"1\">Item 1</Toggle.Option>\n                      </DenaliRadioToggle>\n                */\n                {\"id\":\"7ZBsvnII\",\"block\":\"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[\\\"1\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Item 1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('label').hasText('Item 1', 'DenaliRadioToggle.Option exists and renders inner content');\n                assert.dom('input').hasAttribute('value', '1', 'DenaliRadioToggle.Option exists and has a value');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it handles change events for radio options', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(6);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliRadioToggle @onChanged={{this.onChanged}} as |Toggle|>\n                        <Toggle.Option @value={{1}}>1</Toggle.Option>\n                        <Toggle.Option @value=\"surprise\">2</Toggle.Option>\n                        <Toggle.Option @value={{3}}>3</Toggle.Option>\n                      </DenaliRadioToggle>\n                    \n                */\n                {\"id\":\"iAWwaRYd\",\"block\":\"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[\\\"@onChanged\\\"],[[32,0,[\\\"onChanged\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[\\\"surprise\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[3]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"3\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('onChanged', function (value) {\n                  return assert.equal(value, 3, 'the last value is clicked');\n                });\n                _context2.next = 6;\n                return (0, _testHelpers.click)('.toggle input[value=\"3\"]');\n\n              case 6:\n                assert.dom('.toggle input[value=\"3\"]').isChecked('true', 'The element is marked as checked after being clicked');\n                this.set('onChanged', function (value) {\n                  return assert.equal(value, 1, 'the first value is clicked');\n                });\n                _context2.next = 10;\n                return (0, _testHelpers.click)('.toggle input[value=\"1\"]');\n\n              case 10:\n                assert.dom('.toggle input[value=\"1\"]').isChecked('true', 'The element is marked as checked after being clicked');\n                this.set('onChanged', function (value) {\n                  return assert.equal(value, 'surprise', 'the middle value is clicked');\n                });\n                _context2.next = 14;\n                return (0, _testHelpers.click)('.toggle input[value=\"surprise\"]');\n\n              case 14:\n                assert.dom('.toggle input[value=\"surprise\"]').isChecked('The element is marked as checked after being clicked');\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it handles disabled elements for radio options', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliRadioToggle @onChanged={{this.onChanged}} as |Toggle|>\n                        <Toggle.Option @value={{1}}>1</Toggle.Option>\n                        <Toggle.Option @value=\"surprise\" @disabled={{true}}>2</Toggle.Option>\n                      </DenaliRadioToggle>\n                    \n                */\n                {\"id\":\"3aI1tdRk\",\"block\":\"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[\\\"@onChanged\\\"],[[32,0,[\\\"onChanged\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\",\\\"@disabled\\\"],[\\\"surprise\\\",true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.toggle input[value=\"surprise\"]').hasAttribute('disabled', '', 'The element is marked as disabled');\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it handles checked elements for radio options', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(6);\n                this.checked = false;\n                _context4.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliRadioToggle as |Toggle|>\n                        <Toggle.Option @value={{1}}>1</Toggle.Option>\n                        <Toggle.Option @value={{2}} @checked={{this.checked}}>2</Toggle.Option>\n                        <Toggle.Option @value=\"surprise\" @disabled={{true}}>2</Toggle.Option>\n                      </DenaliRadioToggle>\n                    \n                */\n                {\"id\":\"FQ8XbPHJ\",\"block\":\"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\",\\\"@checked\\\"],[2,[32,0,[\\\"checked\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\",\\\"@disabled\\\"],[\\\"surprise\\\",true]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"2\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 4:\n                assert.dom('.toggle input[value=\"1\"]').isNotChecked('The option is not marked as checked');\n                assert.dom('.toggle input[value=\"2\"]').isNotChecked('The option is not marked as checked');\n                assert.dom('.toggle input[value=\"surprise\"]').isNotChecked('The option is not marked as checked');\n                this.set('checked', true);\n                assert.dom('.toggle input[value=\"1\"]').isNotChecked('The option is still not marked as checked');\n                assert.dom('.toggle input[value=\"2\"]').isChecked('The option is marked as checked after being set by attribute');\n                assert.dom('.toggle input[value=\"surprise\"]').isNotChecked('The option is still not marked as checked');\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it handles clicking labels for radio options', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(3);\n                _context5.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliRadioToggle @onChanged={{this.onChanged}} as |Toggle|>\n                        <Toggle.Option @value={{1}}>1</Toggle.Option>\n                      </DenaliRadioToggle>\n                    \n                */\n                {\"id\":\"iVULLrbh\",\"block\":\"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[\\\"@onChanged\\\"],[[32,0,[\\\"onChanged\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('onChanged', function (value) {\n                  return assert.equal(value, 1, 'the event is triggered when clicking a label');\n                });\n                assert.dom('.toggle input').isNotChecked('The option is not marked as checked');\n                _context5.next = 7;\n                return (0, _testHelpers.click)('.toggle label');\n\n              case 7:\n                assert.dom('.toggle input').isChecked('The option is marked as checked after clicking the label');\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports small size', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliRadioToggle @isSmall={{this.isSmall}} as |Toggle|>\n                        <Toggle.Option @value={{1}}>Item 1</Toggle.Option>\n                      </DenaliRadioToggle>\n                    \n                */\n                {\"id\":\"BjZn/wOP\",\"block\":\"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[\\\"@isSmall\\\"],[[32,0,[\\\"isSmall\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Item 1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.toggle').doesNotHaveClass('is-small', 'DenaliToggle does not have small styling by default');\n                this.set('isSmall', 'true');\n                assert.dom('.toggle').hasClass('is-small', 'DenaliToggle has a small size when `@isSmall` arg is set to true');\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports inverse colors', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliRadioToggle @isInverse={{this.isInverse}} as |Toggle|>\n                        <Toggle.Option @value={{1}}>Item 1</Toggle.Option>\n                      </DenaliRadioToggle>\n                    \n                */\n                {\"id\":\"FtXGd/0l\",\"block\":\"{\\\"symbols\\\":[\\\"Toggle\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-radio-toggle\\\",[],[[\\\"@isInverse\\\"],[[32,0,[\\\"isInverse\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Option\\\"]],[],[[\\\"@value\\\"],[1]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Item 1\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.toggle').doesNotHaveClass('is-inverse', 'DenaliToggle does not have inverse styling by default');\n                this.set('isInverse', 'true');\n                assert.dom('.toggle').hasClass('is-inverse', 'DenaliToggle has inverse styling when `@isInverse` arg is set to true');\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-select-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  var opts = [{\n    text: 'Item 1'\n  }, {\n    text: 'Item 2'\n  }, {\n    text: 'Item 3'\n  }];\n  (0, _qunit.module)('Integration | Component | denali-select', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it requires options', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n                (0, _testHelpers.setupOnerror)(function (_ref3) {\n                  var message = _ref3.message;\n                  assert.equal(message, 'Failed prop type: The prop `options` is marked as required in `DenaliSelectComponent`, but its value is `undefined`.', 'If @args() contains a PropType validator, an error will be thrown if the value is incorrect');\n                });\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliSelect />\n                */\n                {\"id\":\"xNQmAttq\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-select\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it renders an option string', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(3);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliSelect @options={{array \"Item 1\"}} @onChange={{this.onChange}} as |option|>\n                        {{option}}\n                      </DenaliSelect>\n                    \n                */\n                {\"id\":\"iMJ1Oq7y\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\",\\\"@onChange\\\"],[[30,[36,0],[\\\"Item 1\\\"],null],[32,0,[\\\"onChange\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"array\\\"]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('div.input.has-arrow').exists('DenaliSelect renders an wrapper div');\n                assert.dom('div.input select').exists('DenaliSelect renders a select element.');\n                assert.dom('div.input option').hasText('Item 1', 'DenaliSelect option exists and renders text.');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it renders an option object', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(3);\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliSelect @options={{array (hash text=\"Item 1\")}} as |option|>\n                        {{option.text}}\n                      </DenaliSelect>\n                    \n                */\n                {\"id\":\"kRWZLTl9\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\"],[[30,[36,1],[[30,[36,0],null,[[\\\"text\\\"],[\\\"Item 1\\\"]]]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"hash\\\",\\\"array\\\"]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('div.input.has-arrow').exists('DenaliSelect renders an wrapper div');\n                assert.dom('div.input select').exists('DenaliSelect renders a select element.');\n                assert.dom('div.input option').hasText('Item 1', 'DenaliSelect option exists and renders an object.');\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('an option is active', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliSelect @options={{this.options}} @selectedOption={{this.selectedOption}} as |option|>\n                        {{option.text}}\n                      </DenaliSelect>\n                    \n                */\n                {\"id\":\"ALjXIymF\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\",\\\"@selectedOption\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"selectedOption\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('options', opts);\n                this.set('selectedOption', opts[1]);\n                assert.equal((0, _testHelpers.find)('div.input select').selectedIndex, 1, 'DenaliSelect selects the object given by the `@selectedOption` arg');\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('an option is disabled', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(1);\n                _context5.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliSelect @options={{this.options}} @disabledOptions={{this.disabled}} as |option|>\n                        {{option.text}}\n                      </DenaliSelect>\n                    \n                */\n                {\"id\":\"kgli1fE2\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\",\\\"@disabledOptions\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"disabled\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('options', opts);\n                this.set('disabled', [opts[1]]);\n                assert.deepEqual((0, _testHelpers.findAll)('div.input option').map(function (e) {\n                  return e.disabled;\n                }), [false, true, false], 'DenaliSelect options are enabled and disabled as specified.');\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports wrapperClass', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var wrapperClass;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.set('options', opts);\n                _context6.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliSelect\n                        @options={{this.options}}\n                        @wrapperClass={{this.wrapperClass}}\n                        as |option|\n                      >\n                        {{option.text}}\n                      </DenaliSelect>\n                    \n                */\n                {\"id\":\"hbP2x4Dp\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\",\\\"@wrapperClass\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"wrapperClass\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                wrapperClass = 'wrapperClass';\n                assert.dom('.input').doesNotHaveClass(wrapperClass, 'DenaliSelect wrapper does not have a size class by default');\n                this.set('wrapperClass', wrapperClass);\n                assert.dom('.input').hasClass(wrapperClass, 'DenaliSelect wrapper has the provided wrapper class');\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports sizes', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this.set('options', opts);\n                _context7.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliSelect\n                        @options={{this.options}}\n                        @size={{this.size}}\n                        as |option|\n                      >\n                        {{option.text}}\n                      </DenaliSelect>\n                    \n                */\n                {\"id\":\"ktlIT93L\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\",\\\"@size\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"size\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.input').doesNotHaveClass(/is-small|is-medium|is-large/, 'DenaliSelect wrapper does not have a size class by default');\n                this.set('size', 'small');\n                assert.dom('.input').hasClass('is-small', 'DenaliSelect wrapper has the appropriate class for small');\n                this.set('size', 'medium');\n                assert.dom('.input').hasClass('is-medium', 'DenaliSelect wrapper has the appropriate class for medium');\n                this.set('size', 'large');\n                assert.dom('.input').hasClass('is-large', 'DenaliSelect wrapper has the appropriate class for large');\n\n              case 10:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports inverse colors', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(2);\n                _context8.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliSelect @options={{this.options}} @isInverse={{this.isInverse}} as |option|>\n                        {{option.text}}\n                      </DenaliSelect>\n                    \n                */\n                {\"id\":\"yPMkTfcT\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\",\\\"@isInverse\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"isInverse\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('options', opts);\n                assert.dom('div.input').doesNotHaveClass('is-inverse', 'DenaliSelect does not have inverse styling by default');\n                this.set('isInverse', 'true');\n                assert.dom('div.input').hasClass('is-inverse', 'DenaliSelect has inverse styling when `@isInverse` arg is set to true');\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it handles change events', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(2);\n                _context9.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliSelect\n                        @options={{this.options}}\n                        @selectedOption={{this.selectedOption}}\n                        @disabledOptions={{this.disabled}}\n                        @onChange={{this.onChange}} as |option|>\n                        {{option.text}}\n                      </DenaliSelect>\n                    \n                */\n                {\"id\":\"Cb0RRDlU\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-select\\\",[],[[\\\"@options\\\",\\\"@selectedOption\\\",\\\"@disabledOptions\\\",\\\"@onChange\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"selectedOption\\\"]],[32,0,[\\\"disabled\\\"]],[32,0,[\\\"onChange\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('options', [{\n                  text: 'Item 1'\n                }, {\n                  text: 'Item 2'\n                }, {\n                  text: 'Item 3'\n                }]);\n                this.set('selectedOption', this.options[2]);\n                assert.equal((0, _testHelpers.find)('div.input select').selectedIndex, 2);\n                this.set('onChange', function (option) {\n                  _this.set('selectedOption', option);\n\n                  assert.equal(option, _this.options[1], 'DenaliSelect @onChange action provides the object selected');\n                });\n                _context9.next = 9;\n                return (0, _testHelpers.fillIn)('div.input select', 'Item 2');\n\n              case 9:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-sidebar-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-sidebar', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliSidebar>\n                        The Greatest Sidebar\n                      </DenaliSidebar>\n                    \n                */\n                {\"id\":\"sYesis36\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-sidebar\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        The Greatest Sidebar\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.tabs').hasClass('is-primary', 'DenaliSidebar renders a primary style by default');\n                assert.dom('.tabs').hasClass('is-vertical', 'DenaliSidebar renders a vertical style by default');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can yield a `Tab` sub component', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliSidebar as |Sidebar|>\n                        <Sidebar.Tab>\n                          The Greatest Tab\n                        </Sidebar.Tab>\n                      </DenaliSidebar>\n                    \n                */\n                {\"id\":\"hm5QyUdq\",\"block\":\"{\\\"symbols\\\":[\\\"Sidebar\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-sidebar\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Tab\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          The Greatest Tab\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.tabs li span').hasText('The Greatest Tab', 'DenaliSidebar can yield a `Tab` sub component');\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can yield a `LinkToTab` sub component', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliSidebar as |Sidebar|>\n                        <Sidebar.LinkToTab\n                          @route=\"index\"\n                        >\n                          The Greatest Tab\n                        </Sidebar.LinkToTab>\n                      </DenaliSidebar>\n                    \n                */\n                {\"id\":\"b8jt/5BG\",\"block\":\"{\\\"symbols\\\":[\\\"Sidebar\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-sidebar\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"LinkToTab\\\"]],[],[[\\\"@route\\\"],[\\\"index\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          The Greatest Tab\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.tabs li.ember-view a').hasText('The Greatest Tab', 'DenaliSidebar can yield a `LinkToTab` sub component');\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-switch-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-switch', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(4);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliSwitch @offLabel=\"Lights Off\" @onLabel=\"Lights On\" />\n                */\n                {\"id\":\"BBXzTEzD\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-switch\\\",[],[[\\\"@offLabel\\\",\\\"@onLabel\\\"],[\\\"Lights Off\\\",\\\"Lights On\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.denali-switch.switch').exists('A denali switch component is rendered');\n                assert.dom('.denali-switch.switch .label.off').hasText('Lights Off', 'A denali switch renders an off label');\n                assert.dom('.denali-switch.switch .label.on').hasText('Lights On', 'A denali switch renders an on label');\n                assert.dom('.denali-switch.switch input').isNotChecked('The switch is off by default');\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('checked and disabled', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(4);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliSwitch\n                      @offLabel=\"Off\"\n                      @onLabel=\"On\"\n                      checked={{this.checked}}\n                      disabled={{this.disabled}}\n                    />\n                */\n                {\"id\":\"mkllDfCy\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-switch\\\",[[16,\\\"checked\\\",[32,0,[\\\"checked\\\"]]],[16,\\\"disabled\\\",[32,0,[\\\"disabled\\\"]]]],[[\\\"@offLabel\\\",\\\"@onLabel\\\"],[\\\"Off\\\",\\\"On\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.denali-switch.switch input').isNotChecked('The switch is off by default');\n                this.set('checked', true);\n                assert.dom('.denali-switch.switch input').isChecked('The switch is on when checked is set to true');\n                assert.dom('.denali-switch.switch input').isNotDisabled('The switch is not disabled by default');\n                this.set('disabled', true);\n                assert.dom('.denali-switch.switch input').isDisabled('The switch is disabled when disabled is set to true');\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('isEnabled and isDisabled', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(4);\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliSwitch\n                      @offLabel=\"Off\"\n                      @onLabel=\"On\"\n                      @isEnabled={{this.isEnabled}}\n                      @isDisabled={{this.isDisabled}}\n                    />\n                */\n                {\"id\":\"bTgbtKaW\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-switch\\\",[],[[\\\"@offLabel\\\",\\\"@onLabel\\\",\\\"@isEnabled\\\",\\\"@isDisabled\\\"],[\\\"Off\\\",\\\"On\\\",[32,0,[\\\"isEnabled\\\"]],[32,0,[\\\"isDisabled\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.denali-switch.switch input').isNotChecked('The switch is off by default');\n                this.set('isEnabled', true);\n                assert.dom('.denali-switch.switch input').isChecked('The switch is on when isEnabled is set to true');\n                assert.dom('.denali-switch.switch input').isNotDisabled('The switch is not disabled by default');\n                this.set('isDisabled', true);\n                assert.dom('.denali-switch.switch input').isDisabled('The switch is disabled when isDisabled is set to true');\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('click and onChange action', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(7);\n                this.set('clickHandler', function () {\n                  assert.ok('Click handler is called on click');\n                });\n                this.set('changeHandler', function () {\n                  assert.ok('Change handler is called on click');\n                });\n                _context4.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliSwitch\n                      @offLabel=\"Off\"\n                      @onLabel=\"On\"\n                      @onChange={{action this.changeHandler}}\n                      {{on \"click\" (action this.clickHandler)}}\n                    />\n                */\n                {\"id\":\"zO3sOH/Q\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-switch\\\",[[4,[38,1],[\\\"click\\\",[30,[36,0],[[32,0],[32,0,[\\\"clickHandler\\\"]]],null]],null]],[[\\\"@offLabel\\\",\\\"@onLabel\\\",\\\"@onChange\\\"],[\\\"Off\\\",\\\"On\\\",[30,[36,0],[[32,0],[32,0,[\\\"changeHandler\\\"]]],null]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"action\\\",\\\"on\\\"]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 5:\n                assert.dom('.denali-switch.switch input').isNotChecked('The switch is off by default');\n                _context4.next = 8;\n                return (0, _testHelpers.click)('.denali-switch input');\n\n              case 8:\n                assert.dom('.denali-switch.switch input').isChecked('The switch is on after click');\n                _context4.next = 11;\n                return (0, _testHelpers.click)('.denali-switch input');\n\n              case 11:\n                assert.dom('.denali-switch.switch input').isNotChecked('Clicking again turns the switch off');\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-tabs-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-tabs', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTabs>\n                        Inner Content\n                      </DenaliTabs>\n                    \n                */\n                {\"id\":\"8GrCXuaL\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('div.tabs ul').hasText('Inner Content', 'DenaliTabs exists and renders inner content');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports styles', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTabs\n                        @style={{this.style}}\n                      >\n                        Inner Content\n                      </DenaliTabs>\n                    \n                */\n                {\"id\":\"zYyb4j5y\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs\\\",[],[[\\\"@style\\\"],[[32,0,[\\\"style\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.tabs').hasClass('is-primary', 'DenaliTabs renders a primary style by default');\n                assert.dom('.tabs').hasClass('is-horizontal', 'DenaliTabs renders a horizontal style by default');\n                this.set('style', 'secondary');\n                assert.dom('.tabs').hasClass('is-secondary', 'DenaliTabs renders a secondary style by setting `@style` arg to secondary');\n                assert.dom('.tabs').hasClass('is-horizontal', 'DenaliTabs renders a horizontal style by setting `@style` arg to secondary');\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can yield a `Tab` sub component', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTabs as |Tabs|>\n                        <Tabs.Tab>\n                          The Greatest Tab\n                        </Tabs.Tab>\n                      </DenaliTabs>\n                    \n                */\n                {\"id\":\"k6o/df4O\",\"block\":\"{\\\"symbols\\\":[\\\"Tabs\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Tab\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          The Greatest Tab\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.tabs li span').hasText('The Greatest Tab', 'DenaliTabs can yield a `Tab` sub component');\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can yield a `LinkToTab` sub component', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTabs as |Tabs|>\n                        <Tabs.LinkToTab\n                          @route=\"index\"\n                        >\n                          The Greatest Tab\n                        </Tabs.LinkToTab>\n                      </DenaliTabs>\n                    \n                */\n                {\"id\":\"t+uQK36L\",\"block\":\"{\\\"symbols\\\":[\\\"Tabs\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"LinkToTab\\\"]],[],[[\\\"@route\\\"],[\\\"index\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          The Greatest Tab\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('.tabs li.ember-view a').hasText('The Greatest Tab', 'DenaliTabs can yield a `LinkToTab` sub component');\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-tabs/link-to-tab-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/setup-router\"], function (_qunit, _emberQunit, _testHelpers, _setupRouter) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-tabs/link-to-tab', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _setupRouter.default)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTabs::LinkToTab\n                        @route=\"four-oh-four\"\n                      >\n                        Inner Content\n                      </DenaliTabs::LinkToTab>\n                    \n                */\n                {\"id\":\"JqgaWIBS\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs/link-to-tab\\\",[],[[\\\"@route\\\"],[\\\"four-oh-four\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('li a').hasText('Inner Content', 'DenaliTabs::LinkToTab exists and renders Inner Content');\n                assert.dom('li a').hasAttribute('href', '/four-oh-four', 'DenaliTabs::LinkToTab has correct href attribute for given LinkTo arg');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can be set active', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.set('route', 'four-oh-four');\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTabs::LinkToTab\n                        @route={{this.route}}\n                      >\n                        Inner Content\n                      </DenaliTabs::LinkToTab>\n                    \n                */\n                {\"id\":\"+CAaKw1b\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs/link-to-tab\\\",[],[[\\\"@route\\\"],[[32,0,[\\\"route\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('li').doesNotHaveClass('is-active', 'DenaliTabs::LinkToTab is not active when not on the current route');\n                this.set('route', 'index');\n                assert.dom('li').hasClass('is-active', 'DenaliTabs::LinkToTab is active when on the current route');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can be set disabled', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTabs::LinkToTab\n                        @route=\"four-oh-four\"\n                        @disabled={{this.disabled}}\n                      >\n                        Inner Content\n                      </DenaliTabs::LinkToTab>\n                    \n                */\n                {\"id\":\"/47hJNk9\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs/link-to-tab\\\",[],[[\\\"@route\\\",\\\"@disabled\\\"],[\\\"four-oh-four\\\",[32,0,[\\\"disabled\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('li').doesNotHaveClass('is-disabled', 'DenaliTabs::LinkToTab is not disabled by default');\n                this.set('disabled', true);\n                assert.dom('li').hasClass('is-disabled', 'DenaliTabs::LinkToTab is disabled when disabled is set to true');\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-tabs/tab-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-tabs/tab', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTabs::Tab>\n                        Inner Content\n                      </DenaliTabs::Tab>\n                    \n                */\n                {\"id\":\"aPa6o0z5\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs/tab\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('li span').hasText('Inner Content', 'DenaliTabs::Tab exists and renders inner content');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can be set active', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTabs::Tab\n                        @isActive={{this.isActive}}\n                      >\n                        Inner Content\n                      </DenaliTabs::Tab>\n                    \n                */\n                {\"id\":\"fB4GtIQK\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs/tab\\\",[],[[\\\"@isActive\\\"],[[32,0,[\\\"isActive\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('li').doesNotHaveClass('is-active', 'DenaliTabs::Tab is not active by default');\n                this.set('isActive', true);\n                assert.dom('li').hasClass('is-active', 'DenaliTabs::Tab is active when setting `@isActive` arg to true');\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can be set disabled', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTabs::Tab\n                        @isDisabled={{this.isDisabled}}\n                      >\n                        Inner Content\n                      </DenaliTabs::Tab>\n                    \n                */\n                {\"id\":\"RfSZQ4fd\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tabs/tab\\\",[],[[\\\"@isDisabled\\\"],[[32,0,[\\\"isDisabled\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('li').doesNotHaveClass('is-disabled', 'DenaliTabs::Tab is not disabled by default');\n                this.set('isDisabled', true);\n                assert.dom('li').hasClass('is-disabled', 'DenaliTabs::Tab is active when setting `@isDisabled` arg to true');\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-tag-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-tag', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTag>\n                        Inner Content\n                      </DenaliTag>\n                    \n                */\n                {\"id\":\"VrhRTLaM\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tag\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('span.tag').hasText('Inner Content', 'DenaliTag exists and renders inner content');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('states', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTag @state={{this.state}}>\n                        Inner Content\n                      </DenaliTag>\n                    \n                */\n                {\"id\":\"6I9Rb/w2\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tag\\\",[],[[\\\"@state\\\"],[[32,0,[\\\"state\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('span.tag').exists('DenaliTag can render without a state set');\n                this.set('state', 'disabled');\n                assert.dom('span.tag').hasClass('is-disabled', 'DenaliTag can be set disabled by setting the `@state` arg to `disabled`');\n                this.set('state', 'active');\n                assert.dom('span.tag').hasClass('is-active', 'DenaliTag can be set active by setting the `@state` arg to `active`');\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('outlined', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTag @isOutlined={{this.outlined}}>\n                        Inner Content\n                      </DenaliTag>\n                    \n                */\n                {\"id\":\"0KygeDDq\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tag\\\",[],[[\\\"@isOutlined\\\"],[[32,0,[\\\"outlined\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('span.tag').doesNotHaveClass('outlined', 'DenaliTag is not outlined by default');\n                this.set('outlined', true);\n                assert.dom('span.tag').hasClass('outlined', 'DenaliTag can be outlined by setting the `@isOutlined` arg to true');\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('small', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTag @isSmall={{this.isSmall}}>\n                        Inner Content\n                      </DenaliTag>\n                    \n                */\n                {\"id\":\"gTsnXJyg\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tag\\\",[],[[\\\"@isSmall\\\"],[[32,0,[\\\"isSmall\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        Inner Content\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('span.tag').doesNotHaveClass('is-small', 'DenaliTag is not small by default');\n                this.set('isSmall', true);\n                assert.dom('span.tag').hasClass('is-small', 'DenaliTag can be made smaller by setting the `@isSmall` arg to true');\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('icons', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var iconFrontClass, iconBackClass;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(12);\n                _context5.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTag\n                        @iconFront={{this.iconFront}}\n                        @iconFrontClass={{this.iconFrontClass}}\n                        @onIconFrontClick={{this.onIconFrontClick}}\n                        @iconBack={{this.iconBack}}\n                        @iconBackClass={{this.iconBackClass}}\n                        @onIconBackClick={{this.onIconBackClick}}\n                      >Tag Content</DenaliTag>\n                    \n                */\n                {\"id\":\"TiwopR06\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-tag\\\",[],[[\\\"@iconFront\\\",\\\"@iconFrontClass\\\",\\\"@onIconFrontClick\\\",\\\"@iconBack\\\",\\\"@iconBackClass\\\",\\\"@onIconBackClick\\\"],[[32,0,[\\\"iconFront\\\"]],[32,0,[\\\"iconFrontClass\\\"]],[32,0,[\\\"onIconFrontClick\\\"]],[32,0,[\\\"iconBack\\\"]],[32,0,[\\\"iconBackClass\\\"]],[32,0,[\\\"onIconBackClick\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Tag Content\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('span.tag').doesNotHaveClass('has-icon-front', 'DenaliTag does not have the `has-icon-front` class by default');\n                assert.dom('span.tag').doesNotHaveClass('has-icon-back', 'DenaliTag does not have the `has-icon-back` class by default');\n                this.set('iconFront', 'check');\n                assert.dom('span.tag').hasClass('has-icon-front', 'DenaliTag has the `has-icon-front` class when iconFront is specified');\n                assert.dom('span.tag .d-icon').hasClass('d-check', 'DenaliTag has the specified icon in the front');\n                iconFrontClass = 'iconFrontClass';\n                assert.dom('span.tag .d-icon').doesNotHaveClass(iconFrontClass, 'DenaliTag does not have `iconFrontClass` class by default');\n                this.set('iconFrontClass', iconFrontClass);\n                assert.dom('span.tag .d-check').hasClass(iconFrontClass, 'DenaliTag has the specified `iconFrontClass`');\n                this.set('onIconFrontClick', function () {\n                  return assert.ok(true, '`onIconFrontClick` fires on click');\n                });\n                _context5.next = 15;\n                return (0, _testHelpers.click)('.d-check');\n\n              case 15:\n                // unset the front icon to check the back icon\n                this.set('iconFront', undefined);\n                this.set('onIconFrontClick', undefined);\n                this.set('iconBack', 'close');\n                assert.dom('span.tag').hasClass('has-icon-back', 'DenaliTag has the `has-icon-back` class when iconBack is specified');\n                assert.dom('span.tag .d-icon').hasClass('d-close', 'DenaliTag has the specified icon in the back');\n                iconBackClass = 'iconBackClass';\n                assert.dom('span.tag .d-close').doesNotHaveClass(iconBackClass, 'DenaliTag does not have `iconBackClass` class by default');\n                this.set('iconBackClass', iconBackClass);\n                assert.dom('span.tag .d-icon').hasClass(iconBackClass, 'DenaliTag has the specified `iconBackClass`');\n                this.set('onIconBackClick', function () {\n                  return assert.ok(true, '`onIconBackClick` fires on click');\n                });\n                _context5.next = 27;\n                return (0, _testHelpers.click)('.d-close');\n\n              case 27:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-text-area-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-text-area', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(3);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliTextArea>My Input</ DenaliTextArea>\n                */\n                {\"id\":\"T96wn7Vi\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-text-area\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"My Input\\\"]],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.input textarea').exists('An textarea is rendered within a wrapper div with class `.input`');\n                assert.dom('.input textarea').isNotDisabled('The textarea is not disabled by default');\n                assert.dom('.input textarea').hasValue('My Input', 'The textarea has the specified value');\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('states', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliTextArea @state={{this.state}} @errorMsg=\"error\"/>\n                */\n                {\"id\":\"2IRFr3MD\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-text-area\\\",[],[[\\\"@state\\\",\\\"@errorMsg\\\"],[[32,0,[\\\"state\\\"]],\\\"error\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('state', 'active');\n                assert.dom('.input').hasClass('is-active', 'The input wrapper has the appropriate class for active');\n                this.set('state', 'error');\n                assert.dom('.input').hasClass('is-error', 'The input wrapper has the appropriate class for error');\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('disabled', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliTextArea disabled={{true}}/>\n                */\n                {\"id\":\"MuNu47VT\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-text-area\\\",[[16,\\\"disabled\\\",true]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.input textarea').isDisabled('The textarea is disabled when specified');\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('placeholder', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliTextArea placeholder=\"Text field\"/>\n                */\n                {\"id\":\"UFv6MSlF\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-text-area\\\",[[24,\\\"placeholder\\\",\\\"Text field\\\"]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.input textarea').hasAttribute('placeholder', 'Text field', 'The textarea is has the specified placeholder');\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('error message', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(2);\n                _context5.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliTextArea @state=\"error\" @errorMsg={{this.errorMsg}} />\n                */\n                {\"id\":\"Pn2trf9F\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-text-area\\\",[],[[\\\"@state\\\",\\\"@errorMsg\\\"],[\\\"error\\\",[32,0,[\\\"errorMsg\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('.input').hasClass('is-error', 'The input wrapper has the appropriate class.');\n                this.set('errorMsg', 'Email Invalid');\n                assert.dom('.input.is-error .message').hasText('Email Invalid', 'The specified error message is rendered');\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('actions', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(2);\n                this.set('handleInput', function (event) {\n                  assert.equal(event.target.value, 'Random Text', 'the action passed in configured correctly');\n                });\n                _context6.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliTextArea {{on 'input' this.handleInput}} />\n                */\n                {\"id\":\"KQNpnJLn\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-text-area\\\",[[4,[38,0],[\\\"input\\\",[32,0,[\\\"handleInput\\\"]]],null]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"on\\\"]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 4:\n                _context6.next = 6;\n                return (0, _testHelpers.fillIn)('.input textarea', 'Random Text');\n\n              case 6:\n                this.set('handleInput', function (event) {\n                  assert.equal(event.target.value, 'More Random Text', 'the action is configured correctly');\n                });\n                this.element.querySelector('.input textarea').value = 'More Random Text';\n                this.element.querySelector('.input textarea').dispatchEvent(new Event('input'));\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-title-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | denali-title', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliTitle />\n                */\n                {\"id\":\"RxP/umDd\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-title\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('div.title').exists('DenaliTitle can render.');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it renders with a title argument', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliTitle @title={{this.title}} />\n                */\n                {\"id\":\"Hbt0+6im\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-title\\\",[],[[\\\"@title\\\"],[[32,0,[\\\"title\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                this.set('title', 'My Title');\n                assert.dom('span').hasClass('bar', 'DenaliTitle has a bar.');\n                assert.dom('div.title-text').exists('DenaliTitle has a title-text class.');\n                assert.dom('h3').hasTextContaining('My Title', 'DenaliTitle renders a title using an argument.');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it renders with a caption argument', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliTitle @title={{this.title}} @caption={{this.caption}} />\n                */\n                {\"id\":\"wVpajrE5\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-title\\\",[],[[\\\"@title\\\",\\\"@caption\\\"],[[32,0,[\\\"title\\\"]],[32,0,[\\\"caption\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                this.set('caption', 'My Caption');\n                assert.dom('h6').doesNotExist('DenaliTitle does not render a caption without a title.');\n                this.set('title', 'My Title');\n                assert.dom('h6').hasTextContaining('My Caption', 'DenaliTitle renders a caption using an argument.');\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it renders with block components', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTitle as |Title|>\n                        <Title.h1>\n                          {{this.h1}}\n                        </Title.h1>\n                        <Title.h2>\n                          {{this.h2}}\n                        </Title.h2>\n                        <Title.h3>\n                          {{this.h3}}\n                        </Title.h3>\n                        <Title.h4>\n                          {{this.h4}}\n                        </Title.h4>\n                        <Title.h5>\n                          {{this.h5}}\n                        </Title.h5>\n                        <Title.h6>\n                          {{this.h6}}\n                        </Title.h6>\n                      </DenaliTitle>\n                    \n                */\n                {\"id\":\"ES89huP8\",\"block\":\"{\\\"symbols\\\":[\\\"Title\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-title\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h1\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"h1\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h2\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"h2\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h3\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"h3\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h4\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"h4\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h5\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"h5\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h6\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"h6\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                this.set('h1', 'My H1');\n                assert.dom('h1').hasText('My H1', 'DenaliTitle renders block content for h1.');\n                this.set('h2', 'My H2');\n                assert.dom('h2').hasText('My H2', 'DenaliTitle renders block content for h2.');\n                this.set('h3', 'My H3');\n                assert.dom('h3').hasText('My H3', 'DenaliTitle renders block content for h3.');\n                this.set('h4', 'My H4');\n                assert.dom('h4').hasText('My H4', 'DenaliTitle renders block content for h4.');\n                this.set('h5', 'My H5');\n                assert.dom('h5').hasText('My H5', 'DenaliTitle renders block content for h5.');\n                this.set('h6', 'My H6');\n                assert.dom('h6').hasText('My H6', 'DenaliTitle renders block content for h6.');\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports a wide bar', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTitle @hasWideBar={{this.hasWideBar}} as |Title|>\n                        <Title.h1>\n                          {{this.title}}\n                        </Title.h1>\n                        <Title.Caption>\n                          {{this.caption}}\n                        </Title.Caption>\n                      </DenaliTitle>\n                    \n                */\n                {\"id\":\"J9sZLfJZ\",\"block\":\"{\\\"symbols\\\":[\\\"Title\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-title\\\",[],[[\\\"@hasWideBar\\\"],[[32,0,[\\\"hasWideBar\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"h1\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n        \\\"],[8,[32,1,[\\\"Caption\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n          \\\"],[1,[32,0,[\\\"caption\\\"]]],[2,\\\"\\\\n        \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                this.set('hasWideBar', true);\n                assert.dom('span.bar').hasClass('is-wide', 'DenaliTitle has a wide bar.');\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports statuses for bar', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliTitle @backgroundStatus={{this.backgroundStatus}} />\n                    \n                */\n                {\"id\":\"ZHX4VY2e\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-title\\\",[],[[\\\"@backgroundStatus\\\"],[[32,0,[\\\"backgroundStatus\\\"]]]],null],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 2:\n                assert.dom('span.bar').exists('DenaliTitle can render without a backgroundStatus set');\n                this.set('backgroundStatus', 'danger');\n                assert.dom('span.bar').hasClass('has-bg-status-danger', 'DenaliTitle has background status of danger when `@backgroundStatus` arg is set to danger');\n                this.set('backgroundStatus', 'warning');\n                assert.dom('span.bar').hasClass('has-bg-status-warning', 'DenaliTitle has background status of warning when `@backgroundStatus` arg is set to warning');\n                this.set('backgroundStatus', 'success');\n                assert.dom('span.bar').hasClass('has-bg-status-success', 'DenaliTitle has background status of success when `@backgroundStatus` arg is set to success');\n                this.set('backgroundStatus', 'info');\n                assert.dom('span.bar').hasClass('has-bg-status-info', 'DenaliTitle has background status of info when `@backgroundStatus` arg is set to info');\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-title/heading-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  var templates = Object.entries({\n    h1: Ember.HTMLBars.template(\n    /*\n      \n        <DenaliTitle::H1 @isRegular={{this.isRegular}} @isUpperCase={{this.isUpperCase}} @status={{this.status}}>\n          {{this.title}}\n        </DenaliTitle::H1>\n      \n    */\n    {\"id\":\"8A5shuzz\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n    \\\"],[8,\\\"denali-title/h1\\\",[],[[\\\"@isRegular\\\",\\\"@isUpperCase\\\",\\\"@status\\\"],[[32,0,[\\\"isRegular\\\"]],[32,0,[\\\"isUpperCase\\\"]],[32,0,[\\\"status\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n    \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n  \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}),\n    h2: Ember.HTMLBars.template(\n    /*\n      \n        <DenaliTitle::H2 @isRegular={{this.isRegular}} @isUpperCase={{this.isUpperCase}} @status={{this.status}}>\n          {{this.title}}\n        </DenaliTitle::H2>\n      \n    */\n    {\"id\":\"m1Qo2A7H\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n    \\\"],[8,\\\"denali-title/h2\\\",[],[[\\\"@isRegular\\\",\\\"@isUpperCase\\\",\\\"@status\\\"],[[32,0,[\\\"isRegular\\\"]],[32,0,[\\\"isUpperCase\\\"]],[32,0,[\\\"status\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n    \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n  \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}),\n    h3: Ember.HTMLBars.template(\n    /*\n      \n        <DenaliTitle::H3 @isRegular={{this.isRegular}} @isUpperCase={{this.isUpperCase}} @status={{this.status}}>\n          {{this.title}}\n        </DenaliTitle::H3>, \n      \n    */\n    {\"id\":\"bGwfgjGF\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n    \\\"],[8,\\\"denali-title/h3\\\",[],[[\\\"@isRegular\\\",\\\"@isUpperCase\\\",\\\"@status\\\"],[[32,0,[\\\"isRegular\\\"]],[32,0,[\\\"isUpperCase\\\"]],[32,0,[\\\"status\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n    \\\"]],\\\"parameters\\\":[]}]]],[2,\\\", \\\\n  \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}),\n    h4: Ember.HTMLBars.template(\n    /*\n      \n        <DenaliTitle::H4 @isRegular={{this.isRegular}} @isUpperCase={{this.isUpperCase}} @status={{this.status}}>\n          {{this.title}}\n        </DenaliTitle::H4>\n      \n    */\n    {\"id\":\"RHDfT9Fa\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n    \\\"],[8,\\\"denali-title/h4\\\",[],[[\\\"@isRegular\\\",\\\"@isUpperCase\\\",\\\"@status\\\"],[[32,0,[\\\"isRegular\\\"]],[32,0,[\\\"isUpperCase\\\"]],[32,0,[\\\"status\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n    \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n  \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}),\n    h5: Ember.HTMLBars.template(\n    /*\n      \n        <DenaliTitle::H5 @isRegular={{this.isRegular}} @isUpperCase={{this.isUpperCase}} @status={{this.status}}>\n          {{this.title}}\n        </DenaliTitle::H5>\n      \n    */\n    {\"id\":\"PILsNBfM\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n    \\\"],[8,\\\"denali-title/h5\\\",[],[[\\\"@isRegular\\\",\\\"@isUpperCase\\\",\\\"@status\\\"],[[32,0,[\\\"isRegular\\\"]],[32,0,[\\\"isUpperCase\\\"]],[32,0,[\\\"status\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n    \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n  \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}),\n    h6: Ember.HTMLBars.template(\n    /*\n      \n        <DenaliTitle::H6 @isRegular={{this.isRegular}} @isUpperCase={{this.isUpperCase}} @status={{this.status}}>\n          {{this.title}}\n        </DenaliTitle::H6>\n      \n    */\n    {\"id\":\"U6zBx+Vo\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n    \\\"],[8,\\\"denali-title/h6\\\",[],[[\\\"@isRegular\\\",\\\"@isUpperCase\\\",\\\"@status\\\"],[[32,0,[\\\"isRegular\\\"]],[32,0,[\\\"isUpperCase\\\"]],[32,0,[\\\"status\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[1,[32,0,[\\\"title\\\"]]],[2,\\\"\\\\n    \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n  \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"})\n  });\n  (0, _qunit.module)('Integration | Component | denali-title/headings', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _iterator, _step, _step$value, heading, template;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(templates);\n                _context.prev = 1;\n\n                _iterator.s();\n\n              case 3:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _step$value = _slicedToArray(_step.value, 2), heading = _step$value[0], template = _step$value[1];\n                _context.next = 7;\n                return (0, _testHelpers.render)(template);\n\n              case 7:\n                this.set('title', 'My Title');\n                assert.dom(heading).hasText('My Title', \"DenaliTitle::\".concat(heading.toUpperCase(), \" can render.\"));\n\n              case 9:\n                _context.next = 3;\n                break;\n\n              case 11:\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](1);\n\n                _iterator.e(_context.t0);\n\n              case 16:\n                _context.prev = 16;\n\n                _iterator.f();\n\n                return _context.finish(16);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 13, 16, 19]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports regular style', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _iterator2, _step2, _step2$value, heading, template;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _iterator2 = _createForOfIteratorHelper(templates);\n                _context2.prev = 1;\n\n                _iterator2.s();\n\n              case 3:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                _step2$value = _slicedToArray(_step2.value, 2), heading = _step2$value[0], template = _step2$value[1];\n                _context2.next = 7;\n                return (0, _testHelpers.render)(template);\n\n              case 7:\n                this.set('title', 'My Title');\n                this.set('isRegular', undefined);\n                assert.dom(heading).doesNotHaveClass('is-regular', \"Denali::\".concat(heading.toUpperCase(), \" does not have regular styling by default\"));\n                this.set('isRegular', 'true');\n                assert.dom(heading).hasClass('is-regular', \"Denali::\".concat(heading.toUpperCase(), \" has regular styling when @isRegular arg is set to true\"));\n\n              case 12:\n                _context2.next = 3;\n                break;\n\n              case 14:\n                _context2.next = 19;\n                break;\n\n              case 16:\n                _context2.prev = 16;\n                _context2.t0 = _context2[\"catch\"](1);\n\n                _iterator2.e(_context2.t0);\n\n              case 19:\n                _context2.prev = 19;\n\n                _iterator2.f();\n\n                return _context2.finish(19);\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 16, 19, 22]]);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports upper casing', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _iterator3, _step3, _step3$value, heading, template;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _iterator3 = _createForOfIteratorHelper(templates);\n                _context3.prev = 1;\n\n                _iterator3.s();\n\n              case 3:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                _step3$value = _slicedToArray(_step3.value, 2), heading = _step3$value[0], template = _step3$value[1];\n                _context3.next = 7;\n                return (0, _testHelpers.render)(template);\n\n              case 7:\n                this.set('title', 'My Title');\n                this.set('isUpperCase', undefined);\n                assert.dom(heading).doesNotHaveClass('upper', \"Denali::\".concat(heading.toUpperCase(), \" does not have upper case styling by default\"));\n                this.set('isUpperCase', 'true');\n                assert.dom(heading).hasClass('upper', \"Denali::\".concat(heading.toUpperCase(), \" has upper case styling when @isUpperCase arg is set to true\"));\n\n              case 12:\n                _context3.next = 3;\n                break;\n\n              case 14:\n                _context3.next = 19;\n                break;\n\n              case 16:\n                _context3.prev = 16;\n                _context3.t0 = _context3[\"catch\"](1);\n\n                _iterator3.e(_context3.t0);\n\n              case 19:\n                _context3.prev = 19;\n\n                _iterator3.f();\n\n                return _context3.finish(19);\n\n              case 22:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 16, 19, 22]]);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports statuses', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _iterator4, _step4, _step4$value, heading, template;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _iterator4 = _createForOfIteratorHelper(templates);\n                _context4.prev = 1;\n\n                _iterator4.s();\n\n              case 3:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                _step4$value = _slicedToArray(_step4.value, 2), heading = _step4$value[0], template = _step4$value[1];\n                _context4.next = 7;\n                return (0, _testHelpers.render)(template);\n\n              case 7:\n                this.set('title', 'My Title');\n                this.set('status', undefined);\n                assert.dom(heading).exists(\"DenaliTitle::\".concat(heading.toUpperCase(), \" can render without a status set\"));\n                this.set('status', 'danger');\n                assert.dom(heading).hasClass('is-status-danger', \"DenaliTitle::\".concat(heading.toUpperCase(), \" has status of danger when @status arg is set to danger\"));\n                this.set('status', 'warning');\n                assert.dom(heading).hasClass('is-status-warning', \"DenaliTitle::\".concat(heading.toUpperCase(), \" has status of warning when @status arg is set to warning\"));\n                this.set('status', 'success');\n                assert.dom(heading).hasClass('is-status-success', \"DenaliTitle::\".concat(heading.toUpperCase(), \" has status of success when @status arg is set to success\"));\n                this.set('status', 'info');\n                assert.dom(heading).hasClass('is-status-info', \"DenaliTitle::\".concat(heading.toUpperCase(), \" has status of info when @status arg is set to info\"));\n\n              case 18:\n                _context4.next = 3;\n                break;\n\n              case 20:\n                _context4.next = 25;\n                break;\n\n              case 22:\n                _context4.prev = 22;\n                _context4.t0 = _context4[\"catch\"](1);\n\n                _iterator4.e(_context4.t0);\n\n              case 25:\n                _context4.prev = 25;\n\n                _iterator4.f();\n\n                return _context4.finish(25);\n\n              case 28:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 22, 25, 28]]);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/denali-toggle-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  var option = {\n    text: 'Item 1'\n  };\n  (0, _qunit.module)('Integration | Component | denali-toggle', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it requires options', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n                (0, _testHelpers.setupOnerror)(function (_ref3) {\n                  var message = _ref3.message;\n                  assert.equal(message, 'Failed prop type: The prop `options` is marked as required in `DenaliToggleComponent`, but its value is `undefined`.', 'If @args() contains a PropType validator, an error will be thrown if the value is incorrect');\n                });\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <DenaliToggle />\n                */\n                {\"id\":\"gEfY1nFm\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"denali-toggle\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it renders an option string', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliToggle @options={{array \"Item 1\"}} as |option|>\n                        {{option}}\n                      </DenaliToggle>\n                    \n                */\n                {\"id\":\"YBSggxuj\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\"],[[30,[36,0],[\\\"Item 1\\\"],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"array\\\"]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('ul').exists('DenaliToggle renders a list.');\n                assert.dom('li').hasText('Item 1', 'DenaliToggle option exists and renders text.');\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it renders an option object', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliToggle @options={{array (hash text=\"Item 1\")}} as |option|>\n                        {{option.text}}\n                      </DenaliToggle>\n                    \n                */\n                {\"id\":\"kPDouFX4\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\"],[[30,[36,1],[[30,[36,0],null,[[\\\"text\\\"],[\\\"Item 1\\\"]]]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"hash\\\",\\\"array\\\"]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                assert.dom('ul').exists('DenaliToggle renders a list.');\n                assert.dom('li').hasText('Item 1', 'DenaliToggle option exists and renders an object.');\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('an option is active', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(2);\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliToggle @options={{this.options}} @activeOption={{this.activeOption}} as |option|>\n                        {{option.text}}\n                      </DenaliToggle>\n                    \n                */\n                {\"id\":\"lmylc6wM\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\",\\\"@activeOption\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"activeOption\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('options', [option]);\n                assert.dom('li').doesNotHaveClass('is-active', 'DenaliToggle options are not active by default');\n                this.set('activeOption', option);\n                assert.dom('li').hasClass('is-active', 'DenaliToggle option is active when `@activeOption` arg is set');\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('an option is disabled', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(2);\n                _context5.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliToggle @options={{this.options}} @disabledOptions={{this.disabled}} as |option|>\n                        {{option.text}}\n                      </DenaliToggle>\n                    \n                */\n                {\"id\":\"vk9X0+pk\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\",\\\"@disabledOptions\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"disabled\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('options', [option]);\n                assert.dom('li').doesNotHaveClass('is-disabled', 'DenaliToggle options are not disabled by default');\n                this.set('disabled', [option]);\n                assert.dom('li').hasClass('is-disabled', 'DenaliToggle option is disabled when `@isDisabled` arg is set to true');\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports small size', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(2);\n                _context6.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliToggle @options={{this.options}} @isSmall={{this.isSmall}} as |option|>\n                        {{option.text}}\n                      </DenaliToggle>\n                    \n                */\n                {\"id\":\"cBPGgQeP\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\",\\\"@isSmall\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"isSmall\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('options', [option]);\n                assert.dom('.toggle').doesNotHaveClass('is-small', 'DenaliToggle does not have small styling by default');\n                this.set('isSmall', 'true');\n                assert.dom('.toggle').hasClass('is-small', 'DenaliToggle has a small size when `@isSmall` arg is set to true');\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it supports inverse colors', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(2);\n                _context7.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliToggle @options={{this.options}} @isInverse={{this.isInverse}} as |option|>\n                        {{option.text}}\n                      </DenaliToggle>\n                    \n                */\n                {\"id\":\"Ct59macN\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\",\\\"@isInverse\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"isInverse\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('options', [option]);\n                assert.dom('.toggle').doesNotHaveClass('is-inverse', 'DenaliToggle does not have inverse styling by default');\n                this.set('isInverse', 'true');\n                assert.dom('.toggle').hasClass('is-inverse', 'DenaliToggle has inverse styling when `@isInverse` arg is set to true');\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it handles change events', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(4);\n                _context8.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  \n                      <DenaliToggle\n                        @options={{this.options}}\n                        @activeOption={{this.activeOption}}\n                        @disabledOptions={{this.disabled}}\n                        @onChange={{this.changeActive}} as |option|>\n                        {{option.text}}\n                      </DenaliToggle>\n                    \n                */\n                {\"id\":\"VPfYKTRw\",\"block\":\"{\\\"symbols\\\":[\\\"option\\\"],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"denali-toggle\\\",[],[[\\\"@options\\\",\\\"@activeOption\\\",\\\"@disabledOptions\\\",\\\"@onChange\\\"],[[32,0,[\\\"options\\\"]],[32,0,[\\\"activeOption\\\"]],[32,0,[\\\"disabled\\\"]],[32,0,[\\\"changeActive\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[1,[32,1,[\\\"text\\\"]]],[2,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"moduleName\":\"(unknown template module)\"}));\n\n              case 3:\n                this.set('options', [{\n                  text: 'Item 1'\n                }, {\n                  text: 'Item 2'\n                }, {\n                  text: 'Item 3'\n                }]);\n                this.set('activeOption', this.options[2]);\n                assert.dom('li:nth-child(3)').hasClass('is-active', 'The third option is active');\n                this.set('changeActive', function (option) {\n                  _this.set('activeOption', option);\n\n                  assert.equal(option.text, 'Item 2', 'the second option is clicked');\n                });\n                _context8.next = 9;\n                return (0, _testHelpers.click)('li:nth-child(2)');\n\n              case 9:\n                assert.dom('li:nth-child(2)').hasClass('is-active', 'The element is active after being clicked');\n                this.set('disabled', [this.options[0]]);\n                this.set('changeActive', function () {\n                  assert.notOk(true, '`@onChange` should not be called when option is disabled');\n                });\n                _context8.next = 14;\n                return (0, _testHelpers.click)('li:nth-child(1)');\n\n              case 14:\n                assert.dom('li:nth-child(2)').hasClass('is-active', 'The original element is still active after being clicked');\n\n              case 15:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/test-helper\", [\"dummy/app\", \"dummy/config/environment\", \"qunit\", \"@ember/test-helpers\", \"qunit-dom\", \"ember-qunit\"], function (_app, _environment, QUnit, _testHelpers, _qunitDom, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _qunitDom.setup)(QUnit.assert);\n  (0, _emberQunit.start)();\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdlnXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACptnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtpXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzlVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvhzrvjtzhUA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}